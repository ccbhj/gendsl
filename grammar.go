package gendsl

// Code generated by peg -switch -inline -strict -output ./grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleScript
	ruleExpression
	ruleOperator
	ruleValue
	ruleSpacing
	ruleIdentifier
	ruleLiteral
	ruleNilLiteral
	ruleBoolLiteral
	ruleFloatLiteral
	ruleExponent
	ruleIntegerLiteral
	ruleHexNumeral
	ruleDecimalNumeral
	ruleStringLiteral
	ruleStringChar
	ruleHexByte
	ruleUChar
	ruleLetterOrDigit
	ruleLetter
	ruleDigits
	ruleEscape
	ruleHexDigit
	ruleLPAR
	ruleRPAR
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Script",
	"Expression",
	"Operator",
	"Value",
	"Spacing",
	"Identifier",
	"Literal",
	"NilLiteral",
	"BoolLiteral",
	"FloatLiteral",
	"Exponent",
	"IntegerLiteral",
	"HexNumeral",
	"DecimalNumeral",
	"StringLiteral",
	"StringChar",
	"HexByte",
	"UChar",
	"LetterOrDigit",
	"Letter",
	"Digits",
	"Escape",
	"HexDigit",
	"LPAR",
	"RPAR",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	Buffer string
	buffer []rune
	rules  [27]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Script <- <(Value EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleValue]() {
					goto l0
				}
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if !matchDot() {
							goto l3
						}
						goto l0
					l3:
						position, tokenIndex = position3, tokenIndex3
					}
					add(ruleEOT, position2)
				}
				add(ruleScript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression <- <(LPAR Operator Value* RPAR)> */
		nil,
		/* 2 Operator <- <Identifier> */
		nil,
		/* 3 Value <- <((Expression / Literal / Identifier) Spacing)> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					{
						position10 := position
						{
							position11 := position
							if !_rules[ruleSpacing]() {
								goto l9
							}
							if buffer[position] != rune('(') {
								goto l9
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l9
							}
							add(ruleLPAR, position11)
						}
						{
							position12 := position
							if !_rules[ruleIdentifier]() {
								goto l9
							}
							add(ruleOperator, position12)
						}
					l13:
						{
							position14, tokenIndex14 := position, tokenIndex
							if !_rules[ruleValue]() {
								goto l14
							}
							goto l13
						l14:
							position, tokenIndex = position14, tokenIndex14
						}
						{
							position15 := position
							if !_rules[ruleSpacing]() {
								goto l9
							}
							if buffer[position] != rune(')') {
								goto l9
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l9
							}
							add(ruleRPAR, position15)
						}
						add(ruleExpression, position10)
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					{
						position17 := position
						{
							position18, tokenIndex18 := position, tokenIndex
							{
								position20 := position
								{
									position21, tokenIndex21 := position, tokenIndex
									{
										position23, tokenIndex23 := position, tokenIndex
										if buffer[position] != rune('+') {
											goto l24
										}
										position++
										goto l23
									l24:
										position, tokenIndex = position23, tokenIndex23
										if buffer[position] != rune('-') {
											goto l21
										}
										position++
									}
								l23:
									goto l22
								l21:
									position, tokenIndex = position21, tokenIndex21
								}
							l22:
								{
									position25, tokenIndex25 := position, tokenIndex
									if !_rules[ruleDigits]() {
										goto l26
									}
									if buffer[position] != rune('.') {
										goto l26
									}
									position++
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleDigits]() {
											goto l27
										}
										goto l28
									l27:
										position, tokenIndex = position27, tokenIndex27
									}
								l28:
									{
										position29, tokenIndex29 := position, tokenIndex
										if !_rules[ruleExponent]() {
											goto l29
										}
										goto l30
									l29:
										position, tokenIndex = position29, tokenIndex29
									}
								l30:
									goto l25
								l26:
									position, tokenIndex = position25, tokenIndex25
									if !_rules[ruleDigits]() {
										goto l31
									}
									if !_rules[ruleExponent]() {
										goto l31
									}
									goto l25
								l31:
									position, tokenIndex = position25, tokenIndex25
									if buffer[position] != rune('.') {
										goto l19
									}
									position++
									if !_rules[ruleDigits]() {
										goto l19
									}
									{
										position32, tokenIndex32 := position, tokenIndex
										if !_rules[ruleExponent]() {
											goto l32
										}
										goto l33
									l32:
										position, tokenIndex = position32, tokenIndex32
									}
								l33:
								}
							l25:
								add(ruleFloatLiteral, position20)
							}
							goto l18
						l19:
							position, tokenIndex = position18, tokenIndex18
							{
								switch buffer[position] {
								case '#':
									{
										position35 := position
										{
											position36, tokenIndex36 := position, tokenIndex
											if buffer[position] != rune('#') {
												goto l37
											}
											position++
											if buffer[position] != rune('f') {
												goto l37
											}
											position++
											goto l36
										l37:
											position, tokenIndex = position36, tokenIndex36
											if buffer[position] != rune('#') {
												goto l16
											}
											position++
											if buffer[position] != rune('t') {
												goto l16
											}
											position++
										}
									l36:
										{
											position38, tokenIndex38 := position, tokenIndex
											if !_rules[ruleLetterOrDigit]() {
												goto l38
											}
											goto l16
										l38:
											position, tokenIndex = position38, tokenIndex38
										}
										add(ruleBoolLiteral, position35)
									}
								case '"':
									{
										position39 := position
										if buffer[position] != rune('"') {
											goto l16
										}
										position++
									l40:
										{
											position41, tokenIndex41 := position, tokenIndex
											{
												position42 := position
												{
													position43, tokenIndex43 := position, tokenIndex
													{
														position45 := position
														{
															position46, tokenIndex46 := position, tokenIndex
															if buffer[position] != rune('\\') {
																goto l47
															}
															position++
															if buffer[position] != rune('u') {
																goto l47
															}
															position++
															if !_rules[ruleHexDigit]() {
																goto l47
															}
															if !_rules[ruleHexDigit]() {
																goto l47
															}
															if !_rules[ruleHexDigit]() {
																goto l47
															}
															if !_rules[ruleHexDigit]() {
																goto l47
															}
															goto l46
														l47:
															position, tokenIndex = position46, tokenIndex46
															if buffer[position] != rune('\\') {
																goto l44
															}
															position++
															if buffer[position] != rune('U') {
																goto l44
															}
															position++
															if !_rules[ruleHexDigit]() {
																goto l44
															}
															if !_rules[ruleHexDigit]() {
																goto l44
															}
															if !_rules[ruleHexDigit]() {
																goto l44
															}
															if !_rules[ruleHexDigit]() {
																goto l44
															}
															if !_rules[ruleHexDigit]() {
																goto l44
															}
															if !_rules[ruleHexDigit]() {
																goto l44
															}
															if !_rules[ruleHexDigit]() {
																goto l44
															}
															if !_rules[ruleHexDigit]() {
																goto l44
															}
														}
													l46:
														add(ruleUChar, position45)
													}
													goto l43
												l44:
													position, tokenIndex = position43, tokenIndex43
													{
														position49 := position
														if buffer[position] != rune('\\') {
															goto l48
														}
														position++
														{
															switch buffer[position] {
															case '\'':
																if buffer[position] != rune('\'') {
																	goto l48
																}
																position++
															case '"':
																if buffer[position] != rune('"') {
																	goto l48
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l48
																}
																position++
															case 'v':
																if buffer[position] != rune('v') {
																	goto l48
																}
																position++
															case 't':
																if buffer[position] != rune('t') {
																	goto l48
																}
																position++
															case 'r':
																if buffer[position] != rune('r') {
																	goto l48
																}
																position++
															case 'n':
																if buffer[position] != rune('n') {
																	goto l48
																}
																position++
															case 'f':
																if buffer[position] != rune('f') {
																	goto l48
																}
																position++
															case 'b':
																if buffer[position] != rune('b') {
																	goto l48
																}
																position++
															default:
																if buffer[position] != rune('a') {
																	goto l48
																}
																position++
															}
														}

														add(ruleEscape, position49)
													}
													goto l43
												l48:
													position, tokenIndex = position43, tokenIndex43
													{
														position52 := position
														if buffer[position] != rune('\\') {
															goto l51
														}
														position++
														if buffer[position] != rune('x') {
															goto l51
														}
														position++
														if !_rules[ruleHexDigit]() {
															goto l51
														}
														if !_rules[ruleHexDigit]() {
															goto l51
														}
														add(ruleHexByte, position52)
													}
													goto l43
												l51:
													position, tokenIndex = position43, tokenIndex43
													{
														position53, tokenIndex53 := position, tokenIndex
														{
															switch buffer[position] {
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l53
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l53
																}
																position++
															default:
																if buffer[position] != rune('"') {
																	goto l53
																}
																position++
															}
														}

														goto l41
													l53:
														position, tokenIndex = position53, tokenIndex53
													}
													if !matchDot() {
														goto l41
													}
												}
											l43:
												add(ruleStringChar, position42)
											}
											goto l40
										l41:
											position, tokenIndex = position41, tokenIndex41
										}
										if buffer[position] != rune('"') {
											goto l16
										}
										position++
										add(ruleStringLiteral, position39)
									}
								case 'n':
									{
										position55 := position
										if buffer[position] != rune('n') {
											goto l16
										}
										position++
										if buffer[position] != rune('i') {
											goto l16
										}
										position++
										if buffer[position] != rune('l') {
											goto l16
										}
										position++
										add(ruleNilLiteral, position55)
									}
								default:
									{
										position56 := position
										{
											position57, tokenIndex57 := position, tokenIndex
											{
												position59, tokenIndex59 := position, tokenIndex
												if buffer[position] != rune('+') {
													goto l60
												}
												position++
												goto l59
											l60:
												position, tokenIndex = position59, tokenIndex59
												if buffer[position] != rune('-') {
													goto l57
												}
												position++
											}
										l59:
											goto l58
										l57:
											position, tokenIndex = position57, tokenIndex57
										}
									l58:
										{
											position61, tokenIndex61 := position, tokenIndex
											if buffer[position] != rune('0') {
												goto l62
											}
											position++
											{
												position63, tokenIndex63 := position, tokenIndex
												if buffer[position] != rune('x') {
													goto l64
												}
												position++
												goto l63
											l64:
												position, tokenIndex = position63, tokenIndex63
												if buffer[position] != rune('X') {
													goto l62
												}
												position++
											}
										l63:
											{
												position65 := position
												{
													position66, tokenIndex66 := position, tokenIndex
													if !_rules[ruleHexDigit]() {
														goto l67
													}
												l68:
													{
														position69, tokenIndex69 := position, tokenIndex
													l70:
														{
															position71, tokenIndex71 := position, tokenIndex
															if buffer[position] != rune('_') {
																goto l71
															}
															position++
															goto l70
														l71:
															position, tokenIndex = position71, tokenIndex71
														}
														if !_rules[ruleHexDigit]() {
															goto l69
														}
														goto l68
													l69:
														position, tokenIndex = position69, tokenIndex69
													}
													goto l66
												l67:
													position, tokenIndex = position66, tokenIndex66
													if buffer[position] != rune('0') {
														goto l62
													}
													position++
												}
											l66:
												add(ruleHexNumeral, position65)
											}
											goto l61
										l62:
											position, tokenIndex = position61, tokenIndex61
											{
												position72 := position
												{
													position73, tokenIndex73 := position, tokenIndex
													if c := buffer[position]; c < rune('1') || c > rune('9') {
														goto l74
													}
													position++
												l75:
													{
														position76, tokenIndex76 := position, tokenIndex
													l77:
														{
															position78, tokenIndex78 := position, tokenIndex
															if buffer[position] != rune('_') {
																goto l78
															}
															position++
															goto l77
														l78:
															position, tokenIndex = position78, tokenIndex78
														}
														if c := buffer[position]; c < rune('0') || c > rune('9') {
															goto l76
														}
														position++
														goto l75
													l76:
														position, tokenIndex = position76, tokenIndex76
													}
													goto l73
												l74:
													position, tokenIndex = position73, tokenIndex73
													if buffer[position] != rune('0') {
														goto l16
													}
													position++
												}
											l73:
												add(ruleDecimalNumeral, position72)
											}
										}
									l61:
										{
											position79, tokenIndex79 := position, tokenIndex
											{
												position81, tokenIndex81 := position, tokenIndex
												if buffer[position] != rune('u') {
													goto l82
												}
												position++
												goto l81
											l82:
												position, tokenIndex = position81, tokenIndex81
												if buffer[position] != rune('U') {
													goto l79
												}
												position++
											}
										l81:
											goto l80
										l79:
											position, tokenIndex = position79, tokenIndex79
										}
									l80:
										add(ruleIntegerLiteral, position56)
									}
								}
							}

						}
					l18:
						if !_rules[ruleSpacing]() {
							goto l16
						}
						add(ruleLiteral, position17)
					}
					goto l8
				l16:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleIdentifier]() {
						goto l6
					}
				}
			l8:
				if !_rules[ruleSpacing]() {
					goto l6
				}
				add(ruleValue, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 4 Spacing <- <(((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+ / (';' (!('\r' / '\n') .)* ('\r' / '\n')))*> */
		func() bool {
			{
				position84 := position
			l85:
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position87, tokenIndex87 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l88
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l88
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l88
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l88
								}
								position++
							}
						}

					l89:
						{
							position90, tokenIndex90 := position, tokenIndex
							{
								switch buffer[position] {
								case '\n':
									if buffer[position] != rune('\n') {
										goto l90
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l90
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l90
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l90
									}
									position++
								}
							}

							goto l89
						l90:
							position, tokenIndex = position90, tokenIndex90
						}
						goto l87
					l88:
						position, tokenIndex = position87, tokenIndex87
						if buffer[position] != rune(';') {
							goto l86
						}
						position++
					l93:
						{
							position94, tokenIndex94 := position, tokenIndex
							{
								position95, tokenIndex95 := position, tokenIndex
								{
									position96, tokenIndex96 := position, tokenIndex
									if buffer[position] != rune('\r') {
										goto l97
									}
									position++
									goto l96
								l97:
									position, tokenIndex = position96, tokenIndex96
									if buffer[position] != rune('\n') {
										goto l95
									}
									position++
								}
							l96:
								goto l94
							l95:
								position, tokenIndex = position95, tokenIndex95
							}
							if !matchDot() {
								goto l94
							}
							goto l93
						l94:
							position, tokenIndex = position94, tokenIndex94
						}
						{
							position98, tokenIndex98 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l99
							}
							position++
							goto l98
						l99:
							position, tokenIndex = position98, tokenIndex98
							if buffer[position] != rune('\n') {
								goto l86
							}
							position++
						}
					l98:
					}
				l87:
					goto l85
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				add(ruleSpacing, position84)
			}
			return true
		},
		/* 5 Identifier <- <(((&('@') '@') | (&('$') '$') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') Letter)) (LetterOrDigit / '-')* Spacing)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					switch buffer[position] {
					case '@':
						if buffer[position] != rune('@') {
							goto l100
						}
						position++
					case '$':
						if buffer[position] != rune('$') {
							goto l100
						}
						position++
					default:
						{
							position103 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l100
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l100
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l100
									}
									position++
								}
							}

							add(ruleLetter, position103)
						}
					}
				}

			l105:
				{
					position106, tokenIndex106 := position, tokenIndex
					{
						position107, tokenIndex107 := position, tokenIndex
						if !_rules[ruleLetterOrDigit]() {
							goto l108
						}
						goto l107
					l108:
						position, tokenIndex = position107, tokenIndex107
						if buffer[position] != rune('-') {
							goto l106
						}
						position++
					}
				l107:
					goto l105
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				if !_rules[ruleSpacing]() {
					goto l100
				}
				add(ruleIdentifier, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 6 Literal <- <((FloatLiteral / ((&('#') BoolLiteral) | (&('"') StringLiteral) | (&('n') NilLiteral) | (&('+' | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') IntegerLiteral))) Spacing)> */
		nil,
		/* 7 NilLiteral <- <('n' 'i' 'l')> */
		nil,
		/* 8 BoolLiteral <- <((('#' 'f') / ('#' 't')) !LetterOrDigit)> */
		nil,
		/* 9 FloatLiteral <- <(('+' / '-')? ((Digits '.' Digits? Exponent?) / (Digits Exponent) / ('.' Digits Exponent?)))> */
		nil,
		/* 10 Exponent <- <(('e' / 'E') ('+' / '-')? Digits)> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				{
					position115, tokenIndex115 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l116
					}
					position++
					goto l115
				l116:
					position, tokenIndex = position115, tokenIndex115
					if buffer[position] != rune('E') {
						goto l113
					}
					position++
				}
			l115:
				{
					position117, tokenIndex117 := position, tokenIndex
					{
						position119, tokenIndex119 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l120
						}
						position++
						goto l119
					l120:
						position, tokenIndex = position119, tokenIndex119
						if buffer[position] != rune('-') {
							goto l117
						}
						position++
					}
				l119:
					goto l118
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
			l118:
				if !_rules[ruleDigits]() {
					goto l113
				}
				add(ruleExponent, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 11 IntegerLiteral <- <(('+' / '-')? (('0' ('x' / 'X') HexNumeral) / DecimalNumeral) ('u' / 'U')?)> */
		nil,
		/* 12 HexNumeral <- <((HexDigit ('_'* HexDigit)*) / '0')> */
		nil,
		/* 13 DecimalNumeral <- <(([1-9] ('_'* [0-9])*) / '0')> */
		nil,
		/* 14 StringLiteral <- <('"' StringChar* '"')> */
		nil,
		/* 15 StringChar <- <(UChar / Escape / HexByte / (!((&('\\') '\\') | (&('\n') '\n') | (&('"') '"')) .))> */
		nil,
		/* 16 HexByte <- <('\\' 'x' HexDigit HexDigit)> */
		nil,
		/* 17 UChar <- <(('\\' 'u' HexDigit HexDigit HexDigit HexDigit) / ('\\' 'U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit))> */
		nil,
		/* 18 LetterOrDigit <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position128, tokenIndex128 := position, tokenIndex
			{
				position129 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l128
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l128
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l128
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l128
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position129)
			}
			return true
		l128:
			position, tokenIndex = position128, tokenIndex128
			return false
		},
		/* 19 Letter <- <((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 20 Digits <- <([0-9] ('_'* [0-9])*)> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l132
				}
				position++
			l134:
				{
					position135, tokenIndex135 := position, tokenIndex
				l136:
					{
						position137, tokenIndex137 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l137
						}
						position++
						goto l136
					l137:
						position, tokenIndex = position137, tokenIndex137
					}
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position135, tokenIndex135
				}
				add(ruleDigits, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 21 Escape <- <('\\' ((&('\'') '\'') | (&('"') '"') | (&('\\') '\\') | (&('v') 'v') | (&('t') 't') | (&('r') 'r') | (&('n') 'n') | (&('f') 'f') | (&('b') 'b') | (&('a') 'a')))> */
		nil,
		/* 22 HexDigit <- <((&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				{
					switch buffer[position] {
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l139
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l139
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l139
						}
						position++
					}
				}

				add(ruleHexDigit, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 23 LPAR <- <(Spacing '(' Spacing)> */
		nil,
		/* 24 RPAR <- <(Spacing ')' Spacing)> */
		nil,
		/* 25 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
