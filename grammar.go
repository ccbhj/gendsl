package gendsl

// Code generated by peg -switch -inline -strict -output ./grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleScript
	ruleExpression
	ruleOperator
	ruleValue
	ruleOptionList
	ruleOption
	ruleSpacing
	ruleIdentifier
	ruleIdentifierPrefix
	ruleIdentifierChar
	ruleIdentifierAttr
	ruleAttrPath
	ruleLiteral
	ruleNilLiteral
	ruleBoolLiteral
	ruleFloatLiteral
	ruleExponent
	ruleIntegerLiteral
	ruleHexNumeral
	ruleDecimalNumeral
	ruleLongStringLiteral
	ruleLongStringChar
	ruleStringLiteral
	ruleStringChar
	ruleHexByte
	ruleUChar
	ruleLetterOrDigit
	ruleLetter
	ruleDigits
	ruleEscape
	ruleHexDigit
	ruleLPAR
	ruleRPAR
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Script",
	"Expression",
	"Operator",
	"Value",
	"OptionList",
	"Option",
	"Spacing",
	"Identifier",
	"IdentifierPrefix",
	"IdentifierChar",
	"IdentifierAttr",
	"AttrPath",
	"Literal",
	"NilLiteral",
	"BoolLiteral",
	"FloatLiteral",
	"Exponent",
	"IntegerLiteral",
	"HexNumeral",
	"DecimalNumeral",
	"LongStringLiteral",
	"LongStringChar",
	"StringLiteral",
	"StringChar",
	"HexByte",
	"UChar",
	"LetterOrDigit",
	"Letter",
	"Digits",
	"Escape",
	"HexDigit",
	"LPAR",
	"RPAR",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	Buffer string
	buffer []rune
	rules  [35]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Script <- <(Value EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleValue]() {
					goto l0
				}
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if !matchDot() {
							goto l3
						}
						goto l0
					l3:
						position, tokenIndex = position3, tokenIndex3
					}
					add(ruleEOT, position2)
				}
				add(ruleScript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression <- <(LPAR Operator OptionList? Value* RPAR)> */
		nil,
		/* 2 Operator <- <Identifier> */
		nil,
		/* 3 Value <- <((Expression / Literal / IdentifierAttr / Identifier) Spacing)> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					{
						position10 := position
						{
							position11 := position
							if !_rules[ruleSpacing]() {
								goto l9
							}
							if buffer[position] != rune('(') {
								goto l9
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l9
							}
							add(ruleLPAR, position11)
						}
						{
							position12 := position
							if !_rules[ruleIdentifier]() {
								goto l9
							}
							add(ruleOperator, position12)
						}
						{
							position13, tokenIndex13 := position, tokenIndex
							{
								position15 := position
								{
									position18 := position
									if buffer[position] != rune('#') {
										goto l13
									}
									position++
									if buffer[position] != rune(':') {
										goto l13
									}
									position++
									if !_rules[ruleIdentifier]() {
										goto l13
									}
									{
										position19, tokenIndex19 := position, tokenIndex
										if !_rules[ruleLiteral]() {
											goto l20
										}
										goto l19
									l20:
										position, tokenIndex = position19, tokenIndex19
										if !_rules[ruleIdentifier]() {
											goto l13
										}
									}
								l19:
									if !_rules[ruleSpacing]() {
										goto l13
									}
									add(ruleOption, position18)
								}
							l16:
								{
									position17, tokenIndex17 := position, tokenIndex
									{
										position21 := position
										if buffer[position] != rune('#') {
											goto l17
										}
										position++
										if buffer[position] != rune(':') {
											goto l17
										}
										position++
										if !_rules[ruleIdentifier]() {
											goto l17
										}
										{
											position22, tokenIndex22 := position, tokenIndex
											if !_rules[ruleLiteral]() {
												goto l23
											}
											goto l22
										l23:
											position, tokenIndex = position22, tokenIndex22
											if !_rules[ruleIdentifier]() {
												goto l17
											}
										}
									l22:
										if !_rules[ruleSpacing]() {
											goto l17
										}
										add(ruleOption, position21)
									}
									goto l16
								l17:
									position, tokenIndex = position17, tokenIndex17
								}
								add(ruleOptionList, position15)
							}
							goto l14
						l13:
							position, tokenIndex = position13, tokenIndex13
						}
					l14:
					l24:
						{
							position25, tokenIndex25 := position, tokenIndex
							if !_rules[ruleValue]() {
								goto l25
							}
							goto l24
						l25:
							position, tokenIndex = position25, tokenIndex25
						}
						{
							position26 := position
							if !_rules[ruleSpacing]() {
								goto l9
							}
							if buffer[position] != rune(')') {
								goto l9
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l9
							}
							add(ruleRPAR, position26)
						}
						add(ruleExpression, position10)
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleLiteral]() {
						goto l27
					}
					goto l8
				l27:
					position, tokenIndex = position8, tokenIndex8
					{
						position29 := position
						if !_rules[ruleIdentifier]() {
							goto l28
						}
						{
							position32 := position
							if buffer[position] != rune('.') {
								goto l28
							}
							position++
							if !_rules[ruleIdentifier]() {
								goto l28
							}
							add(ruleAttrPath, position32)
						}
					l30:
						{
							position31, tokenIndex31 := position, tokenIndex
							{
								position33 := position
								if buffer[position] != rune('.') {
									goto l31
								}
								position++
								if !_rules[ruleIdentifier]() {
									goto l31
								}
								add(ruleAttrPath, position33)
							}
							goto l30
						l31:
							position, tokenIndex = position31, tokenIndex31
						}
						add(ruleIdentifierAttr, position29)
					}
					goto l8
				l28:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleIdentifier]() {
						goto l6
					}
				}
			l8:
				if !_rules[ruleSpacing]() {
					goto l6
				}
				add(ruleValue, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 4 OptionList <- <Option+> */
		nil,
		/* 5 Option <- <('#' ':' Identifier (Literal / Identifier) Spacing)> */
		nil,
		/* 6 Spacing <- <(((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+ / (';' (!('\r' / '\n') .)* ('\r' / '\n')))*> */
		func() bool {
			{
				position37 := position
			l38:
				{
					position39, tokenIndex39 := position, tokenIndex
					{
						position40, tokenIndex40 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l41
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l41
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l41
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l41
								}
								position++
							}
						}

					l42:
						{
							position43, tokenIndex43 := position, tokenIndex
							{
								switch buffer[position] {
								case '\n':
									if buffer[position] != rune('\n') {
										goto l43
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l43
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l43
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l43
									}
									position++
								}
							}

							goto l42
						l43:
							position, tokenIndex = position43, tokenIndex43
						}
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune(';') {
							goto l39
						}
						position++
					l46:
						{
							position47, tokenIndex47 := position, tokenIndex
							{
								position48, tokenIndex48 := position, tokenIndex
								{
									position49, tokenIndex49 := position, tokenIndex
									if buffer[position] != rune('\r') {
										goto l50
									}
									position++
									goto l49
								l50:
									position, tokenIndex = position49, tokenIndex49
									if buffer[position] != rune('\n') {
										goto l48
									}
									position++
								}
							l49:
								goto l47
							l48:
								position, tokenIndex = position48, tokenIndex48
							}
							if !matchDot() {
								goto l47
							}
							goto l46
						l47:
							position, tokenIndex = position47, tokenIndex47
						}
						{
							position51, tokenIndex51 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l52
							}
							position++
							goto l51
						l52:
							position, tokenIndex = position51, tokenIndex51
							if buffer[position] != rune('\n') {
								goto l39
							}
							position++
						}
					l51:
					}
				l40:
					goto l38
				l39:
					position, tokenIndex = position39, tokenIndex39
				}
				add(ruleSpacing, position37)
			}
			return true
		},
		/* 7 Identifier <- <(!BoolLiteral IdentifierPrefix IdentifierChar* Spacing)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				{
					position55, tokenIndex55 := position, tokenIndex
					if !_rules[ruleBoolLiteral]() {
						goto l55
					}
					goto l53
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				{
					position56 := position
					{
						position57, tokenIndex57 := position, tokenIndex
						{
							position59 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l58
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l58
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l58
									}
									position++
								}
							}

							add(ruleLetter, position59)
						}
						goto l57
					l58:
						position, tokenIndex = position57, tokenIndex57
						{
							switch buffer[position] {
							case '>':
								if buffer[position] != rune('>') {
									goto l53
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l53
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l53
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l53
								}
								position++
							case '_':
								if buffer[position] != rune('_') {
									goto l53
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l53
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l53
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l53
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l53
								}
								position++
							case '$':
								if buffer[position] != rune('$') {
									goto l53
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l53
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l53
								}
								position++
							default:
								if buffer[position] != rune('~') {
									goto l53
								}
								position++
							}
						}

					}
				l57:
					add(ruleIdentifierPrefix, position56)
				}
			l62:
				{
					position63, tokenIndex63 := position, tokenIndex
					{
						position64 := position
						{
							position65, tokenIndex65 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l66
							}
							goto l65
						l66:
							position, tokenIndex = position65, tokenIndex65
							{
								switch buffer[position] {
								case '>':
									if buffer[position] != rune('>') {
										goto l67
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l67
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l67
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l67
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l67
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l67
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l67
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l67
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l67
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l67
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l67
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l67
									}
									position++
								default:
									if buffer[position] != rune('~') {
										goto l67
									}
									position++
								}
							}

							goto l65
						l67:
							position, tokenIndex = position65, tokenIndex65
							if buffer[position] != rune('-') {
								goto l63
							}
							position++
						}
					l65:
						add(ruleIdentifierChar, position64)
					}
					goto l62
				l63:
					position, tokenIndex = position63, tokenIndex63
				}
				if !_rules[ruleSpacing]() {
					goto l53
				}
				add(ruleIdentifier, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 8 IdentifierPrefix <- <(Letter / ((&('>') '>') | (&('<') '<') | (&('|') '|') | (&('?') '?') | (&('_') '_') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('@') '@') | (&('!') '!') | (&('~') '~')))> */
		nil,
		/* 9 IdentifierChar <- <(LetterOrDigit / ((&('>') '>') | (&('<') '<') | (&('|') '|') | (&('?') '?') | (&('_') '_') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('@') '@') | (&('!') '!') | (&('~') '~')) / '-')> */
		nil,
		/* 10 IdentifierAttr <- <(Identifier AttrPath+)> */
		nil,
		/* 11 AttrPath <- <('.' Identifier)> */
		nil,
		/* 12 Literal <- <((FloatLiteral / LongStringLiteral / ((&('#') BoolLiteral) | (&('"') StringLiteral) | (&('n') NilLiteral) | (&('+' | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') IntegerLiteral))) Spacing)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				{
					position75, tokenIndex75 := position, tokenIndex
					{
						position77 := position
						{
							position78, tokenIndex78 := position, tokenIndex
							{
								position80, tokenIndex80 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l81
								}
								position++
								goto l80
							l81:
								position, tokenIndex = position80, tokenIndex80
								if buffer[position] != rune('-') {
									goto l78
								}
								position++
							}
						l80:
							goto l79
						l78:
							position, tokenIndex = position78, tokenIndex78
						}
					l79:
						{
							position82, tokenIndex82 := position, tokenIndex
							if !_rules[ruleDigits]() {
								goto l83
							}
							if buffer[position] != rune('.') {
								goto l83
							}
							position++
							{
								position84, tokenIndex84 := position, tokenIndex
								if !_rules[ruleDigits]() {
									goto l84
								}
								goto l85
							l84:
								position, tokenIndex = position84, tokenIndex84
							}
						l85:
							{
								position86, tokenIndex86 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l86
								}
								goto l87
							l86:
								position, tokenIndex = position86, tokenIndex86
							}
						l87:
							goto l82
						l83:
							position, tokenIndex = position82, tokenIndex82
							if !_rules[ruleDigits]() {
								goto l88
							}
							if !_rules[ruleExponent]() {
								goto l88
							}
							goto l82
						l88:
							position, tokenIndex = position82, tokenIndex82
							if buffer[position] != rune('.') {
								goto l76
							}
							position++
							if !_rules[ruleDigits]() {
								goto l76
							}
							{
								position89, tokenIndex89 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l89
								}
								goto l90
							l89:
								position, tokenIndex = position89, tokenIndex89
							}
						l90:
						}
					l82:
						add(ruleFloatLiteral, position77)
					}
					goto l75
				l76:
					position, tokenIndex = position75, tokenIndex75
					{
						position92 := position
						if buffer[position] != rune('"') {
							goto l91
						}
						position++
						if buffer[position] != rune('"') {
							goto l91
						}
						position++
						if buffer[position] != rune('"') {
							goto l91
						}
						position++
					l93:
						{
							position94, tokenIndex94 := position, tokenIndex
							{
								position95 := position
								{
									position96, tokenIndex96 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l96
									}
									position++
									goto l94
								l96:
									position, tokenIndex = position96, tokenIndex96
								}
								if !matchDot() {
									goto l94
								}
								add(ruleLongStringChar, position95)
							}
							goto l93
						l94:
							position, tokenIndex = position94, tokenIndex94
						}
						if buffer[position] != rune('"') {
							goto l91
						}
						position++
						if buffer[position] != rune('"') {
							goto l91
						}
						position++
						if buffer[position] != rune('"') {
							goto l91
						}
						position++
						add(ruleLongStringLiteral, position92)
					}
					goto l75
				l91:
					position, tokenIndex = position75, tokenIndex75
					{
						switch buffer[position] {
						case '#':
							if !_rules[ruleBoolLiteral]() {
								goto l73
							}
						case '"':
							{
								position98 := position
								if buffer[position] != rune('"') {
									goto l73
								}
								position++
							l99:
								{
									position100, tokenIndex100 := position, tokenIndex
									{
										position101 := position
										{
											position102, tokenIndex102 := position, tokenIndex
											{
												position104 := position
												{
													position105, tokenIndex105 := position, tokenIndex
													if buffer[position] != rune('\\') {
														goto l106
													}
													position++
													if buffer[position] != rune('u') {
														goto l106
													}
													position++
													if !_rules[ruleHexDigit]() {
														goto l106
													}
													if !_rules[ruleHexDigit]() {
														goto l106
													}
													if !_rules[ruleHexDigit]() {
														goto l106
													}
													if !_rules[ruleHexDigit]() {
														goto l106
													}
													goto l105
												l106:
													position, tokenIndex = position105, tokenIndex105
													if buffer[position] != rune('\\') {
														goto l103
													}
													position++
													if buffer[position] != rune('U') {
														goto l103
													}
													position++
													if !_rules[ruleHexDigit]() {
														goto l103
													}
													if !_rules[ruleHexDigit]() {
														goto l103
													}
													if !_rules[ruleHexDigit]() {
														goto l103
													}
													if !_rules[ruleHexDigit]() {
														goto l103
													}
													if !_rules[ruleHexDigit]() {
														goto l103
													}
													if !_rules[ruleHexDigit]() {
														goto l103
													}
													if !_rules[ruleHexDigit]() {
														goto l103
													}
													if !_rules[ruleHexDigit]() {
														goto l103
													}
												}
											l105:
												add(ruleUChar, position104)
											}
											goto l102
										l103:
											position, tokenIndex = position102, tokenIndex102
											{
												position108 := position
												if buffer[position] != rune('\\') {
													goto l107
												}
												position++
												{
													switch buffer[position] {
													case '\'':
														if buffer[position] != rune('\'') {
															goto l107
														}
														position++
													case '"':
														if buffer[position] != rune('"') {
															goto l107
														}
														position++
													case '\\':
														if buffer[position] != rune('\\') {
															goto l107
														}
														position++
													case 'v':
														if buffer[position] != rune('v') {
															goto l107
														}
														position++
													case 't':
														if buffer[position] != rune('t') {
															goto l107
														}
														position++
													case 'r':
														if buffer[position] != rune('r') {
															goto l107
														}
														position++
													case 'n':
														if buffer[position] != rune('n') {
															goto l107
														}
														position++
													case 'f':
														if buffer[position] != rune('f') {
															goto l107
														}
														position++
													case 'b':
														if buffer[position] != rune('b') {
															goto l107
														}
														position++
													default:
														if buffer[position] != rune('a') {
															goto l107
														}
														position++
													}
												}

												add(ruleEscape, position108)
											}
											goto l102
										l107:
											position, tokenIndex = position102, tokenIndex102
											{
												position111 := position
												if buffer[position] != rune('\\') {
													goto l110
												}
												position++
												if buffer[position] != rune('x') {
													goto l110
												}
												position++
												if !_rules[ruleHexDigit]() {
													goto l110
												}
												if !_rules[ruleHexDigit]() {
													goto l110
												}
												add(ruleHexByte, position111)
											}
											goto l102
										l110:
											position, tokenIndex = position102, tokenIndex102
											{
												position112, tokenIndex112 := position, tokenIndex
												{
													switch buffer[position] {
													case '\\':
														if buffer[position] != rune('\\') {
															goto l112
														}
														position++
													case '\n':
														if buffer[position] != rune('\n') {
															goto l112
														}
														position++
													default:
														if buffer[position] != rune('"') {
															goto l112
														}
														position++
													}
												}

												goto l100
											l112:
												position, tokenIndex = position112, tokenIndex112
											}
											if !matchDot() {
												goto l100
											}
										}
									l102:
										add(ruleStringChar, position101)
									}
									goto l99
								l100:
									position, tokenIndex = position100, tokenIndex100
								}
								if buffer[position] != rune('"') {
									goto l73
								}
								position++
								add(ruleStringLiteral, position98)
							}
						case 'n':
							{
								position114 := position
								if buffer[position] != rune('n') {
									goto l73
								}
								position++
								if buffer[position] != rune('i') {
									goto l73
								}
								position++
								if buffer[position] != rune('l') {
									goto l73
								}
								position++
								add(ruleNilLiteral, position114)
							}
						default:
							{
								position115 := position
								{
									position116, tokenIndex116 := position, tokenIndex
									{
										position118, tokenIndex118 := position, tokenIndex
										if buffer[position] != rune('+') {
											goto l119
										}
										position++
										goto l118
									l119:
										position, tokenIndex = position118, tokenIndex118
										if buffer[position] != rune('-') {
											goto l116
										}
										position++
									}
								l118:
									goto l117
								l116:
									position, tokenIndex = position116, tokenIndex116
								}
							l117:
								{
									position120, tokenIndex120 := position, tokenIndex
									if buffer[position] != rune('0') {
										goto l121
									}
									position++
									{
										position122, tokenIndex122 := position, tokenIndex
										if buffer[position] != rune('x') {
											goto l123
										}
										position++
										goto l122
									l123:
										position, tokenIndex = position122, tokenIndex122
										if buffer[position] != rune('X') {
											goto l121
										}
										position++
									}
								l122:
									{
										position124 := position
										{
											position125, tokenIndex125 := position, tokenIndex
											if !_rules[ruleHexDigit]() {
												goto l126
											}
										l127:
											{
												position128, tokenIndex128 := position, tokenIndex
											l129:
												{
													position130, tokenIndex130 := position, tokenIndex
													if buffer[position] != rune('_') {
														goto l130
													}
													position++
													goto l129
												l130:
													position, tokenIndex = position130, tokenIndex130
												}
												if !_rules[ruleHexDigit]() {
													goto l128
												}
												goto l127
											l128:
												position, tokenIndex = position128, tokenIndex128
											}
											goto l125
										l126:
											position, tokenIndex = position125, tokenIndex125
											if buffer[position] != rune('0') {
												goto l121
											}
											position++
										}
									l125:
										add(ruleHexNumeral, position124)
									}
									goto l120
								l121:
									position, tokenIndex = position120, tokenIndex120
									{
										position131 := position
										{
											position132, tokenIndex132 := position, tokenIndex
											if c := buffer[position]; c < rune('1') || c > rune('9') {
												goto l133
											}
											position++
										l134:
											{
												position135, tokenIndex135 := position, tokenIndex
											l136:
												{
													position137, tokenIndex137 := position, tokenIndex
													if buffer[position] != rune('_') {
														goto l137
													}
													position++
													goto l136
												l137:
													position, tokenIndex = position137, tokenIndex137
												}
												if c := buffer[position]; c < rune('0') || c > rune('9') {
													goto l135
												}
												position++
												goto l134
											l135:
												position, tokenIndex = position135, tokenIndex135
											}
											goto l132
										l133:
											position, tokenIndex = position132, tokenIndex132
											if buffer[position] != rune('0') {
												goto l73
											}
											position++
										}
									l132:
										add(ruleDecimalNumeral, position131)
									}
								}
							l120:
								{
									position138, tokenIndex138 := position, tokenIndex
									{
										position140, tokenIndex140 := position, tokenIndex
										if buffer[position] != rune('u') {
											goto l141
										}
										position++
										goto l140
									l141:
										position, tokenIndex = position140, tokenIndex140
										if buffer[position] != rune('U') {
											goto l138
										}
										position++
									}
								l140:
									goto l139
								l138:
									position, tokenIndex = position138, tokenIndex138
								}
							l139:
								add(ruleIntegerLiteral, position115)
							}
						}
					}

				}
			l75:
				if !_rules[ruleSpacing]() {
					goto l73
				}
				add(ruleLiteral, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 13 NilLiteral <- <('n' 'i' 'l')> */
		nil,
		/* 14 BoolLiteral <- <((('#' 'f') / ('#' 't')) !LetterOrDigit)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				{
					position145, tokenIndex145 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l146
					}
					position++
					if buffer[position] != rune('f') {
						goto l146
					}
					position++
					goto l145
				l146:
					position, tokenIndex = position145, tokenIndex145
					if buffer[position] != rune('#') {
						goto l143
					}
					position++
					if buffer[position] != rune('t') {
						goto l143
					}
					position++
				}
			l145:
				{
					position147, tokenIndex147 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l147
					}
					goto l143
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
				add(ruleBoolLiteral, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 15 FloatLiteral <- <(('+' / '-')? ((Digits '.' Digits? Exponent?) / (Digits Exponent) / ('.' Digits Exponent?)))> */
		nil,
		/* 16 Exponent <- <(('e' / 'E') ('+' / '-')? Digits)> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				{
					position151, tokenIndex151 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l152
					}
					position++
					goto l151
				l152:
					position, tokenIndex = position151, tokenIndex151
					if buffer[position] != rune('E') {
						goto l149
					}
					position++
				}
			l151:
				{
					position153, tokenIndex153 := position, tokenIndex
					{
						position155, tokenIndex155 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l156
						}
						position++
						goto l155
					l156:
						position, tokenIndex = position155, tokenIndex155
						if buffer[position] != rune('-') {
							goto l153
						}
						position++
					}
				l155:
					goto l154
				l153:
					position, tokenIndex = position153, tokenIndex153
				}
			l154:
				if !_rules[ruleDigits]() {
					goto l149
				}
				add(ruleExponent, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 17 IntegerLiteral <- <(('+' / '-')? (('0' ('x' / 'X') HexNumeral) / DecimalNumeral) ('u' / 'U')?)> */
		nil,
		/* 18 HexNumeral <- <((HexDigit ('_'* HexDigit)*) / '0')> */
		nil,
		/* 19 DecimalNumeral <- <(([1-9] ('_'* [0-9])*) / '0')> */
		nil,
		/* 20 LongStringLiteral <- <('"' '"' '"' LongStringChar* ('"' '"' '"'))> */
		nil,
		/* 21 LongStringChar <- <(!'"' .)> */
		nil,
		/* 22 StringLiteral <- <('"' StringChar* '"')> */
		nil,
		/* 23 StringChar <- <(UChar / Escape / HexByte / (!((&('\\') '\\') | (&('\n') '\n') | (&('"') '"')) .))> */
		nil,
		/* 24 HexByte <- <('\\' 'x' HexDigit HexDigit)> */
		nil,
		/* 25 UChar <- <(('\\' 'u' HexDigit HexDigit HexDigit HexDigit) / ('\\' 'U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit))> */
		nil,
		/* 26 LetterOrDigit <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l166
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l166
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l166
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l166
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 27 Letter <- <((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 28 Digits <- <([0-9] ('_'* [0-9])*)> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l170
				}
				position++
			l172:
				{
					position173, tokenIndex173 := position, tokenIndex
				l174:
					{
						position175, tokenIndex175 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l175
						}
						position++
						goto l174
					l175:
						position, tokenIndex = position175, tokenIndex175
					}
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l173
					}
					position++
					goto l172
				l173:
					position, tokenIndex = position173, tokenIndex173
				}
				add(ruleDigits, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 29 Escape <- <('\\' ((&('\'') '\'') | (&('"') '"') | (&('\\') '\\') | (&('v') 'v') | (&('t') 't') | (&('r') 'r') | (&('n') 'n') | (&('f') 'f') | (&('b') 'b') | (&('a') 'a')))> */
		nil,
		/* 30 HexDigit <- <((&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				{
					switch buffer[position] {
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l177
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l177
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l177
						}
						position++
					}
				}

				add(ruleHexDigit, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 31 LPAR <- <(Spacing '(' Spacing)> */
		nil,
		/* 32 RPAR <- <(Spacing ')' Spacing)> */
		nil,
		/* 33 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
