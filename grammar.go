package gendsl

// Code generated by peg -switch -inline -strict -output ./grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleScript
	ruleExpression
	ruleOperator
	ruleValue
	ruleOptionList
	ruleOption
	ruleSpacing
	ruleIdentifier
	ruleIdentifierAttr
	ruleAttrPath
	ruleLiteral
	ruleNilLiteral
	ruleBoolLiteral
	ruleFloatLiteral
	ruleExponent
	ruleIntegerLiteral
	ruleHexNumeral
	ruleDecimalNumeral
	ruleLongStringLiteral
	ruleLongStringChar
	ruleStringLiteral
	ruleStringChar
	ruleHexByte
	ruleUChar
	ruleLetterOrDigit
	ruleLetter
	ruleDigits
	ruleEscape
	ruleHexDigit
	ruleLPAR
	ruleRPAR
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Script",
	"Expression",
	"Operator",
	"Value",
	"OptionList",
	"Option",
	"Spacing",
	"Identifier",
	"IdentifierAttr",
	"AttrPath",
	"Literal",
	"NilLiteral",
	"BoolLiteral",
	"FloatLiteral",
	"Exponent",
	"IntegerLiteral",
	"HexNumeral",
	"DecimalNumeral",
	"LongStringLiteral",
	"LongStringChar",
	"StringLiteral",
	"StringChar",
	"HexByte",
	"UChar",
	"LetterOrDigit",
	"Letter",
	"Digits",
	"Escape",
	"HexDigit",
	"LPAR",
	"RPAR",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	Buffer string
	buffer []rune
	rules  [33]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Script <- <(Value EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleValue]() {
					goto l0
				}
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if !matchDot() {
							goto l3
						}
						goto l0
					l3:
						position, tokenIndex = position3, tokenIndex3
					}
					add(ruleEOT, position2)
				}
				add(ruleScript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression <- <(LPAR Operator OptionList? Value* RPAR)> */
		nil,
		/* 2 Operator <- <Identifier> */
		nil,
		/* 3 Value <- <((Expression / Literal / IdentifierAttr / Identifier) Spacing)> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					{
						position10 := position
						{
							position11 := position
							if !_rules[ruleSpacing]() {
								goto l9
							}
							if buffer[position] != rune('(') {
								goto l9
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l9
							}
							add(ruleLPAR, position11)
						}
						{
							position12 := position
							if !_rules[ruleIdentifier]() {
								goto l9
							}
							add(ruleOperator, position12)
						}
						{
							position13, tokenIndex13 := position, tokenIndex
							{
								position15 := position
								{
									position18 := position
									if buffer[position] != rune('#') {
										goto l13
									}
									position++
									if buffer[position] != rune(':') {
										goto l13
									}
									position++
									if !_rules[ruleIdentifier]() {
										goto l13
									}
									{
										position19, tokenIndex19 := position, tokenIndex
										if !_rules[ruleLiteral]() {
											goto l20
										}
										goto l19
									l20:
										position, tokenIndex = position19, tokenIndex19
										if !_rules[ruleIdentifier]() {
											goto l13
										}
									}
								l19:
									if !_rules[ruleSpacing]() {
										goto l13
									}
									add(ruleOption, position18)
								}
							l16:
								{
									position17, tokenIndex17 := position, tokenIndex
									{
										position21 := position
										if buffer[position] != rune('#') {
											goto l17
										}
										position++
										if buffer[position] != rune(':') {
											goto l17
										}
										position++
										if !_rules[ruleIdentifier]() {
											goto l17
										}
										{
											position22, tokenIndex22 := position, tokenIndex
											if !_rules[ruleLiteral]() {
												goto l23
											}
											goto l22
										l23:
											position, tokenIndex = position22, tokenIndex22
											if !_rules[ruleIdentifier]() {
												goto l17
											}
										}
									l22:
										if !_rules[ruleSpacing]() {
											goto l17
										}
										add(ruleOption, position21)
									}
									goto l16
								l17:
									position, tokenIndex = position17, tokenIndex17
								}
								add(ruleOptionList, position15)
							}
							goto l14
						l13:
							position, tokenIndex = position13, tokenIndex13
						}
					l14:
					l24:
						{
							position25, tokenIndex25 := position, tokenIndex
							if !_rules[ruleValue]() {
								goto l25
							}
							goto l24
						l25:
							position, tokenIndex = position25, tokenIndex25
						}
						{
							position26 := position
							if !_rules[ruleSpacing]() {
								goto l9
							}
							if buffer[position] != rune(')') {
								goto l9
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l9
							}
							add(ruleRPAR, position26)
						}
						add(ruleExpression, position10)
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleLiteral]() {
						goto l27
					}
					goto l8
				l27:
					position, tokenIndex = position8, tokenIndex8
					{
						position29 := position
						if !_rules[ruleIdentifier]() {
							goto l28
						}
						{
							position32 := position
							if buffer[position] != rune('.') {
								goto l28
							}
							position++
							if !_rules[ruleIdentifier]() {
								goto l28
							}
							add(ruleAttrPath, position32)
						}
					l30:
						{
							position31, tokenIndex31 := position, tokenIndex
							{
								position33 := position
								if buffer[position] != rune('.') {
									goto l31
								}
								position++
								if !_rules[ruleIdentifier]() {
									goto l31
								}
								add(ruleAttrPath, position33)
							}
							goto l30
						l31:
							position, tokenIndex = position31, tokenIndex31
						}
						add(ruleIdentifierAttr, position29)
					}
					goto l8
				l28:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleIdentifier]() {
						goto l6
					}
				}
			l8:
				if !_rules[ruleSpacing]() {
					goto l6
				}
				add(ruleValue, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 4 OptionList <- <Option+> */
		nil,
		/* 5 Option <- <('#' ':' Identifier (Literal / Identifier) Spacing)> */
		nil,
		/* 6 Spacing <- <(((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+ / (';' (!('\r' / '\n') .)* ('\r' / '\n')))*> */
		func() bool {
			{
				position37 := position
			l38:
				{
					position39, tokenIndex39 := position, tokenIndex
					{
						position40, tokenIndex40 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l41
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l41
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l41
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l41
								}
								position++
							}
						}

					l42:
						{
							position43, tokenIndex43 := position, tokenIndex
							{
								switch buffer[position] {
								case '\n':
									if buffer[position] != rune('\n') {
										goto l43
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l43
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l43
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l43
									}
									position++
								}
							}

							goto l42
						l43:
							position, tokenIndex = position43, tokenIndex43
						}
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune(';') {
							goto l39
						}
						position++
					l46:
						{
							position47, tokenIndex47 := position, tokenIndex
							{
								position48, tokenIndex48 := position, tokenIndex
								{
									position49, tokenIndex49 := position, tokenIndex
									if buffer[position] != rune('\r') {
										goto l50
									}
									position++
									goto l49
								l50:
									position, tokenIndex = position49, tokenIndex49
									if buffer[position] != rune('\n') {
										goto l48
									}
									position++
								}
							l49:
								goto l47
							l48:
								position, tokenIndex = position48, tokenIndex48
							}
							if !matchDot() {
								goto l47
							}
							goto l46
						l47:
							position, tokenIndex = position47, tokenIndex47
						}
						{
							position51, tokenIndex51 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l52
							}
							position++
							goto l51
						l52:
							position, tokenIndex = position51, tokenIndex51
							if buffer[position] != rune('\n') {
								goto l39
							}
							position++
						}
					l51:
					}
				l40:
					goto l38
				l39:
					position, tokenIndex = position39, tokenIndex39
				}
				add(ruleSpacing, position37)
			}
			return true
		},
		/* 7 Identifier <- <(((&('@') '@') | (&('$') '$') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') Letter)) (LetterOrDigit / '-')* Spacing)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				{
					switch buffer[position] {
					case '@':
						if buffer[position] != rune('@') {
							goto l53
						}
						position++
					case '$':
						if buffer[position] != rune('$') {
							goto l53
						}
						position++
					default:
						{
							position56 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l53
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l53
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l53
									}
									position++
								}
							}

							add(ruleLetter, position56)
						}
					}
				}

			l58:
				{
					position59, tokenIndex59 := position, tokenIndex
					{
						position60, tokenIndex60 := position, tokenIndex
						if !_rules[ruleLetterOrDigit]() {
							goto l61
						}
						goto l60
					l61:
						position, tokenIndex = position60, tokenIndex60
						if buffer[position] != rune('-') {
							goto l59
						}
						position++
					}
				l60:
					goto l58
				l59:
					position, tokenIndex = position59, tokenIndex59
				}
				if !_rules[ruleSpacing]() {
					goto l53
				}
				add(ruleIdentifier, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 8 IdentifierAttr <- <(Identifier AttrPath+)> */
		nil,
		/* 9 AttrPath <- <('.' Identifier)> */
		nil,
		/* 10 Literal <- <((FloatLiteral / LongStringLiteral / ((&('#') BoolLiteral) | (&('"') StringLiteral) | (&('n') NilLiteral) | (&('+' | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') IntegerLiteral))) Spacing)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					{
						position68 := position
						{
							position69, tokenIndex69 := position, tokenIndex
							{
								position71, tokenIndex71 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l72
								}
								position++
								goto l71
							l72:
								position, tokenIndex = position71, tokenIndex71
								if buffer[position] != rune('-') {
									goto l69
								}
								position++
							}
						l71:
							goto l70
						l69:
							position, tokenIndex = position69, tokenIndex69
						}
					l70:
						{
							position73, tokenIndex73 := position, tokenIndex
							if !_rules[ruleDigits]() {
								goto l74
							}
							if buffer[position] != rune('.') {
								goto l74
							}
							position++
							{
								position75, tokenIndex75 := position, tokenIndex
								if !_rules[ruleDigits]() {
									goto l75
								}
								goto l76
							l75:
								position, tokenIndex = position75, tokenIndex75
							}
						l76:
							{
								position77, tokenIndex77 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l77
								}
								goto l78
							l77:
								position, tokenIndex = position77, tokenIndex77
							}
						l78:
							goto l73
						l74:
							position, tokenIndex = position73, tokenIndex73
							if !_rules[ruleDigits]() {
								goto l79
							}
							if !_rules[ruleExponent]() {
								goto l79
							}
							goto l73
						l79:
							position, tokenIndex = position73, tokenIndex73
							if buffer[position] != rune('.') {
								goto l67
							}
							position++
							if !_rules[ruleDigits]() {
								goto l67
							}
							{
								position80, tokenIndex80 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l80
								}
								goto l81
							l80:
								position, tokenIndex = position80, tokenIndex80
							}
						l81:
						}
					l73:
						add(ruleFloatLiteral, position68)
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					{
						position83 := position
						if buffer[position] != rune('"') {
							goto l82
						}
						position++
						if buffer[position] != rune('"') {
							goto l82
						}
						position++
						if buffer[position] != rune('"') {
							goto l82
						}
						position++
					l84:
						{
							position85, tokenIndex85 := position, tokenIndex
							{
								position86 := position
								{
									position87, tokenIndex87 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l87
									}
									position++
									goto l85
								l87:
									position, tokenIndex = position87, tokenIndex87
								}
								if !matchDot() {
									goto l85
								}
								add(ruleLongStringChar, position86)
							}
							goto l84
						l85:
							position, tokenIndex = position85, tokenIndex85
						}
						if buffer[position] != rune('"') {
							goto l82
						}
						position++
						if buffer[position] != rune('"') {
							goto l82
						}
						position++
						if buffer[position] != rune('"') {
							goto l82
						}
						position++
						add(ruleLongStringLiteral, position83)
					}
					goto l66
				l82:
					position, tokenIndex = position66, tokenIndex66
					{
						switch buffer[position] {
						case '#':
							{
								position89 := position
								{
									position90, tokenIndex90 := position, tokenIndex
									if buffer[position] != rune('#') {
										goto l91
									}
									position++
									if buffer[position] != rune('f') {
										goto l91
									}
									position++
									goto l90
								l91:
									position, tokenIndex = position90, tokenIndex90
									if buffer[position] != rune('#') {
										goto l64
									}
									position++
									if buffer[position] != rune('t') {
										goto l64
									}
									position++
								}
							l90:
								{
									position92, tokenIndex92 := position, tokenIndex
									if !_rules[ruleLetterOrDigit]() {
										goto l92
									}
									goto l64
								l92:
									position, tokenIndex = position92, tokenIndex92
								}
								add(ruleBoolLiteral, position89)
							}
						case '"':
							{
								position93 := position
								if buffer[position] != rune('"') {
									goto l64
								}
								position++
							l94:
								{
									position95, tokenIndex95 := position, tokenIndex
									{
										position96 := position
										{
											position97, tokenIndex97 := position, tokenIndex
											{
												position99 := position
												{
													position100, tokenIndex100 := position, tokenIndex
													if buffer[position] != rune('\\') {
														goto l101
													}
													position++
													if buffer[position] != rune('u') {
														goto l101
													}
													position++
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													goto l100
												l101:
													position, tokenIndex = position100, tokenIndex100
													if buffer[position] != rune('\\') {
														goto l98
													}
													position++
													if buffer[position] != rune('U') {
														goto l98
													}
													position++
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
												}
											l100:
												add(ruleUChar, position99)
											}
											goto l97
										l98:
											position, tokenIndex = position97, tokenIndex97
											{
												position103 := position
												if buffer[position] != rune('\\') {
													goto l102
												}
												position++
												{
													switch buffer[position] {
													case '\'':
														if buffer[position] != rune('\'') {
															goto l102
														}
														position++
													case '"':
														if buffer[position] != rune('"') {
															goto l102
														}
														position++
													case '\\':
														if buffer[position] != rune('\\') {
															goto l102
														}
														position++
													case 'v':
														if buffer[position] != rune('v') {
															goto l102
														}
														position++
													case 't':
														if buffer[position] != rune('t') {
															goto l102
														}
														position++
													case 'r':
														if buffer[position] != rune('r') {
															goto l102
														}
														position++
													case 'n':
														if buffer[position] != rune('n') {
															goto l102
														}
														position++
													case 'f':
														if buffer[position] != rune('f') {
															goto l102
														}
														position++
													case 'b':
														if buffer[position] != rune('b') {
															goto l102
														}
														position++
													default:
														if buffer[position] != rune('a') {
															goto l102
														}
														position++
													}
												}

												add(ruleEscape, position103)
											}
											goto l97
										l102:
											position, tokenIndex = position97, tokenIndex97
											{
												position106 := position
												if buffer[position] != rune('\\') {
													goto l105
												}
												position++
												if buffer[position] != rune('x') {
													goto l105
												}
												position++
												if !_rules[ruleHexDigit]() {
													goto l105
												}
												if !_rules[ruleHexDigit]() {
													goto l105
												}
												add(ruleHexByte, position106)
											}
											goto l97
										l105:
											position, tokenIndex = position97, tokenIndex97
											{
												position107, tokenIndex107 := position, tokenIndex
												{
													switch buffer[position] {
													case '\\':
														if buffer[position] != rune('\\') {
															goto l107
														}
														position++
													case '\n':
														if buffer[position] != rune('\n') {
															goto l107
														}
														position++
													default:
														if buffer[position] != rune('"') {
															goto l107
														}
														position++
													}
												}

												goto l95
											l107:
												position, tokenIndex = position107, tokenIndex107
											}
											if !matchDot() {
												goto l95
											}
										}
									l97:
										add(ruleStringChar, position96)
									}
									goto l94
								l95:
									position, tokenIndex = position95, tokenIndex95
								}
								if buffer[position] != rune('"') {
									goto l64
								}
								position++
								add(ruleStringLiteral, position93)
							}
						case 'n':
							{
								position109 := position
								if buffer[position] != rune('n') {
									goto l64
								}
								position++
								if buffer[position] != rune('i') {
									goto l64
								}
								position++
								if buffer[position] != rune('l') {
									goto l64
								}
								position++
								add(ruleNilLiteral, position109)
							}
						default:
							{
								position110 := position
								{
									position111, tokenIndex111 := position, tokenIndex
									{
										position113, tokenIndex113 := position, tokenIndex
										if buffer[position] != rune('+') {
											goto l114
										}
										position++
										goto l113
									l114:
										position, tokenIndex = position113, tokenIndex113
										if buffer[position] != rune('-') {
											goto l111
										}
										position++
									}
								l113:
									goto l112
								l111:
									position, tokenIndex = position111, tokenIndex111
								}
							l112:
								{
									position115, tokenIndex115 := position, tokenIndex
									if buffer[position] != rune('0') {
										goto l116
									}
									position++
									{
										position117, tokenIndex117 := position, tokenIndex
										if buffer[position] != rune('x') {
											goto l118
										}
										position++
										goto l117
									l118:
										position, tokenIndex = position117, tokenIndex117
										if buffer[position] != rune('X') {
											goto l116
										}
										position++
									}
								l117:
									{
										position119 := position
										{
											position120, tokenIndex120 := position, tokenIndex
											if !_rules[ruleHexDigit]() {
												goto l121
											}
										l122:
											{
												position123, tokenIndex123 := position, tokenIndex
											l124:
												{
													position125, tokenIndex125 := position, tokenIndex
													if buffer[position] != rune('_') {
														goto l125
													}
													position++
													goto l124
												l125:
													position, tokenIndex = position125, tokenIndex125
												}
												if !_rules[ruleHexDigit]() {
													goto l123
												}
												goto l122
											l123:
												position, tokenIndex = position123, tokenIndex123
											}
											goto l120
										l121:
											position, tokenIndex = position120, tokenIndex120
											if buffer[position] != rune('0') {
												goto l116
											}
											position++
										}
									l120:
										add(ruleHexNumeral, position119)
									}
									goto l115
								l116:
									position, tokenIndex = position115, tokenIndex115
									{
										position126 := position
										{
											position127, tokenIndex127 := position, tokenIndex
											if c := buffer[position]; c < rune('1') || c > rune('9') {
												goto l128
											}
											position++
										l129:
											{
												position130, tokenIndex130 := position, tokenIndex
											l131:
												{
													position132, tokenIndex132 := position, tokenIndex
													if buffer[position] != rune('_') {
														goto l132
													}
													position++
													goto l131
												l132:
													position, tokenIndex = position132, tokenIndex132
												}
												if c := buffer[position]; c < rune('0') || c > rune('9') {
													goto l130
												}
												position++
												goto l129
											l130:
												position, tokenIndex = position130, tokenIndex130
											}
											goto l127
										l128:
											position, tokenIndex = position127, tokenIndex127
											if buffer[position] != rune('0') {
												goto l64
											}
											position++
										}
									l127:
										add(ruleDecimalNumeral, position126)
									}
								}
							l115:
								{
									position133, tokenIndex133 := position, tokenIndex
									{
										position135, tokenIndex135 := position, tokenIndex
										if buffer[position] != rune('u') {
											goto l136
										}
										position++
										goto l135
									l136:
										position, tokenIndex = position135, tokenIndex135
										if buffer[position] != rune('U') {
											goto l133
										}
										position++
									}
								l135:
									goto l134
								l133:
									position, tokenIndex = position133, tokenIndex133
								}
							l134:
								add(ruleIntegerLiteral, position110)
							}
						}
					}

				}
			l66:
				if !_rules[ruleSpacing]() {
					goto l64
				}
				add(ruleLiteral, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 11 NilLiteral <- <('n' 'i' 'l')> */
		nil,
		/* 12 BoolLiteral <- <((('#' 'f') / ('#' 't')) !LetterOrDigit)> */
		nil,
		/* 13 FloatLiteral <- <(('+' / '-')? ((Digits '.' Digits? Exponent?) / (Digits Exponent) / ('.' Digits Exponent?)))> */
		nil,
		/* 14 Exponent <- <(('e' / 'E') ('+' / '-')? Digits)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				{
					position142, tokenIndex142 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l143
					}
					position++
					goto l142
				l143:
					position, tokenIndex = position142, tokenIndex142
					if buffer[position] != rune('E') {
						goto l140
					}
					position++
				}
			l142:
				{
					position144, tokenIndex144 := position, tokenIndex
					{
						position146, tokenIndex146 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l147
						}
						position++
						goto l146
					l147:
						position, tokenIndex = position146, tokenIndex146
						if buffer[position] != rune('-') {
							goto l144
						}
						position++
					}
				l146:
					goto l145
				l144:
					position, tokenIndex = position144, tokenIndex144
				}
			l145:
				if !_rules[ruleDigits]() {
					goto l140
				}
				add(ruleExponent, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 15 IntegerLiteral <- <(('+' / '-')? (('0' ('x' / 'X') HexNumeral) / DecimalNumeral) ('u' / 'U')?)> */
		nil,
		/* 16 HexNumeral <- <((HexDigit ('_'* HexDigit)*) / '0')> */
		nil,
		/* 17 DecimalNumeral <- <(([1-9] ('_'* [0-9])*) / '0')> */
		nil,
		/* 18 LongStringLiteral <- <('"' '"' '"' LongStringChar* ('"' '"' '"'))> */
		nil,
		/* 19 LongStringChar <- <(!'"' .)> */
		nil,
		/* 20 StringLiteral <- <('"' StringChar* '"')> */
		nil,
		/* 21 StringChar <- <(UChar / Escape / HexByte / (!((&('\\') '\\') | (&('\n') '\n') | (&('"') '"')) .))> */
		nil,
		/* 22 HexByte <- <('\\' 'x' HexDigit HexDigit)> */
		nil,
		/* 23 UChar <- <(('\\' 'u' HexDigit HexDigit HexDigit HexDigit) / ('\\' 'U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit))> */
		nil,
		/* 24 LetterOrDigit <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l157
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l157
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l157
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l157
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 25 Letter <- <((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 26 Digits <- <([0-9] ('_'* [0-9])*)> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l161
				}
				position++
			l163:
				{
					position164, tokenIndex164 := position, tokenIndex
				l165:
					{
						position166, tokenIndex166 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l166
						}
						position++
						goto l165
					l166:
						position, tokenIndex = position166, tokenIndex166
					}
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l164
					}
					position++
					goto l163
				l164:
					position, tokenIndex = position164, tokenIndex164
				}
				add(ruleDigits, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 27 Escape <- <('\\' ((&('\'') '\'') | (&('"') '"') | (&('\\') '\\') | (&('v') 'v') | (&('t') 't') | (&('r') 'r') | (&('n') 'n') | (&('f') 'f') | (&('b') 'b') | (&('a') 'a')))> */
		nil,
		/* 28 HexDigit <- <((&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				{
					switch buffer[position] {
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l168
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l168
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l168
						}
						position++
					}
				}

				add(ruleHexDigit, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 29 LPAR <- <(Spacing '(' Spacing)> */
		nil,
		/* 30 RPAR <- <(Spacing ')' Spacing)> */
		nil,
		/* 31 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
