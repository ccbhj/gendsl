package gendsl

// Code generated by peg -switch -inline -strict -output ./grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleScript
	ruleExpression
	ruleOperator
	ruleOperand
	ruleSpacing
	ruleIdentifier
	ruleLiteral
	ruleBoolLiteral
	ruleFloatLiteral
	ruleExponent
	ruleIntegerLiteral
	ruleDecimalNumeral
	ruleStringLiteral
	ruleStringChar
	ruleLetterOrDigit
	ruleLetter
	ruleDigits
	ruleEscape
	ruleLPAR
	ruleRPAR
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Script",
	"Expression",
	"Operator",
	"Operand",
	"Spacing",
	"Identifier",
	"Literal",
	"BoolLiteral",
	"FloatLiteral",
	"Exponent",
	"IntegerLiteral",
	"DecimalNumeral",
	"StringLiteral",
	"StringChar",
	"LetterOrDigit",
	"Letter",
	"Digits",
	"Escape",
	"LPAR",
	"RPAR",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [22]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Script <- <(Expression EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleExpression]() {
					goto l0
				}
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if !matchDot() {
							goto l3
						}
						goto l0
					l3:
						position, tokenIndex = position3, tokenIndex3
					}
					add(ruleEOT, position2)
				}
				add(ruleScript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression <- <(LPAR Operator Operand* RPAR)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				{
					position6 := position
					if !_rules[ruleSpacing]() {
						goto l4
					}
					if buffer[position] != rune('(') {
						goto l4
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l4
					}
					add(ruleLPAR, position6)
				}
				{
					position7 := position
					if !_rules[ruleIdentifier]() {
						goto l4
					}
					if !_rules[ruleSpacing]() {
						goto l4
					}
					add(ruleOperator, position7)
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					{
						position10 := position
						{
							switch buffer[position] {
							case '\t', '\n', '\r', ' ', '(', ';':
								if !_rules[ruleExpression]() {
									goto l9
								}
							case '"', '#', '+', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								{
									position12 := position
									{
										position13, tokenIndex13 := position, tokenIndex
										{
											position15 := position
											{
												position16, tokenIndex16 := position, tokenIndex
												{
													position18, tokenIndex18 := position, tokenIndex
													if buffer[position] != rune('+') {
														goto l19
													}
													position++
													goto l18
												l19:
													position, tokenIndex = position18, tokenIndex18
													if buffer[position] != rune('-') {
														goto l16
													}
													position++
												}
											l18:
												goto l17
											l16:
												position, tokenIndex = position16, tokenIndex16
											}
										l17:
											{
												position20, tokenIndex20 := position, tokenIndex
												if !_rules[ruleDigits]() {
													goto l21
												}
												if buffer[position] != rune('.') {
													goto l21
												}
												position++
												{
													position22, tokenIndex22 := position, tokenIndex
													if !_rules[ruleDigits]() {
														goto l22
													}
													goto l23
												l22:
													position, tokenIndex = position22, tokenIndex22
												}
											l23:
												{
													position24, tokenIndex24 := position, tokenIndex
													if !_rules[ruleExponent]() {
														goto l24
													}
													goto l25
												l24:
													position, tokenIndex = position24, tokenIndex24
												}
											l25:
												goto l20
											l21:
												position, tokenIndex = position20, tokenIndex20
												if !_rules[ruleDigits]() {
													goto l26
												}
												if !_rules[ruleExponent]() {
													goto l26
												}
												goto l20
											l26:
												position, tokenIndex = position20, tokenIndex20
												if buffer[position] != rune('.') {
													goto l14
												}
												position++
												if !_rules[ruleDigits]() {
													goto l14
												}
												{
													position27, tokenIndex27 := position, tokenIndex
													if !_rules[ruleExponent]() {
														goto l27
													}
													goto l28
												l27:
													position, tokenIndex = position27, tokenIndex27
												}
											l28:
											}
										l20:
											add(ruleFloatLiteral, position15)
										}
										goto l13
									l14:
										position, tokenIndex = position13, tokenIndex13
										{
											switch buffer[position] {
											case '#':
												{
													position30 := position
													{
														position31, tokenIndex31 := position, tokenIndex
														if buffer[position] != rune('#') {
															goto l32
														}
														position++
														if buffer[position] != rune('f') {
															goto l32
														}
														position++
														goto l31
													l32:
														position, tokenIndex = position31, tokenIndex31
														if buffer[position] != rune('#') {
															goto l9
														}
														position++
														if buffer[position] != rune('t') {
															goto l9
														}
														position++
													}
												l31:
													{
														position33, tokenIndex33 := position, tokenIndex
														if !_rules[ruleLetterOrDigit]() {
															goto l33
														}
														goto l9
													l33:
														position, tokenIndex = position33, tokenIndex33
													}
													add(ruleBoolLiteral, position30)
												}
											case '"':
												{
													position34 := position
													if buffer[position] != rune('"') {
														goto l9
													}
													position++
												l35:
													{
														position36, tokenIndex36 := position, tokenIndex
														{
															position37 := position
															{
																position38, tokenIndex38 := position, tokenIndex
																{
																	position40 := position
																	if buffer[position] != rune('\\') {
																		goto l39
																	}
																	position++
																	{
																		switch buffer[position] {
																		case '\\':
																			if buffer[position] != rune('\\') {
																				goto l39
																			}
																			position++
																		case '\'':
																			if buffer[position] != rune('\'') {
																				goto l39
																			}
																			position++
																		case '"':
																			if buffer[position] != rune('"') {
																				goto l39
																			}
																			position++
																		case 'r':
																			if buffer[position] != rune('r') {
																				goto l39
																			}
																			position++
																		case 'f':
																			if buffer[position] != rune('f') {
																				goto l39
																			}
																			position++
																		case 'n':
																			if buffer[position] != rune('n') {
																				goto l39
																			}
																			position++
																		case 't':
																			if buffer[position] != rune('t') {
																				goto l39
																			}
																			position++
																		default:
																			if buffer[position] != rune('b') {
																				goto l39
																			}
																			position++
																		}
																	}

																	add(ruleEscape, position40)
																}
																goto l38
															l39:
																position, tokenIndex = position38, tokenIndex38
																{
																	position42, tokenIndex42 := position, tokenIndex
																	{
																		switch buffer[position] {
																		case '\\':
																			if buffer[position] != rune('\\') {
																				goto l42
																			}
																			position++
																		case '\n':
																			if buffer[position] != rune('\n') {
																				goto l42
																			}
																			position++
																		default:
																			if buffer[position] != rune('"') {
																				goto l42
																			}
																			position++
																		}
																	}

																	goto l36
																l42:
																	position, tokenIndex = position42, tokenIndex42
																}
																if !matchDot() {
																	goto l36
																}
															}
														l38:
															add(ruleStringChar, position37)
														}
														goto l35
													l36:
														position, tokenIndex = position36, tokenIndex36
													}
													if buffer[position] != rune('"') {
														goto l9
													}
													position++
													add(ruleStringLiteral, position34)
												}
											default:
												{
													position44 := position
													{
														position45, tokenIndex45 := position, tokenIndex
														if buffer[position] != rune('-') {
															goto l45
														}
														position++
														goto l46
													l45:
														position, tokenIndex = position45, tokenIndex45
													}
												l46:
													{
														position47 := position
														{
															position48, tokenIndex48 := position, tokenIndex
															if buffer[position] != rune('0') {
																goto l49
															}
															position++
															goto l48
														l49:
															position, tokenIndex = position48, tokenIndex48
															if c := buffer[position]; c < rune('1') || c > rune('9') {
																goto l9
															}
															position++
														l50:
															{
																position51, tokenIndex51 := position, tokenIndex
															l52:
																{
																	position53, tokenIndex53 := position, tokenIndex
																	if buffer[position] != rune('_') {
																		goto l53
																	}
																	position++
																	goto l52
																l53:
																	position, tokenIndex = position53, tokenIndex53
																}
																if c := buffer[position]; c < rune('0') || c > rune('9') {
																	goto l51
																}
																position++
																goto l50
															l51:
																position, tokenIndex = position51, tokenIndex51
															}
														}
													l48:
														add(ruleDecimalNumeral, position47)
													}
													{
														position54, tokenIndex54 := position, tokenIndex
														{
															switch buffer[position] {
															case 'F':
																if buffer[position] != rune('F') {
																	goto l54
																}
																position++
															case 'f':
																if buffer[position] != rune('f') {
																	goto l54
																}
																position++
															case 'U':
																if buffer[position] != rune('U') {
																	goto l54
																}
																position++
															default:
																if buffer[position] != rune('u') {
																	goto l54
																}
																position++
															}
														}

														goto l55
													l54:
														position, tokenIndex = position54, tokenIndex54
													}
												l55:
													add(ruleIntegerLiteral, position44)
												}
											}
										}

									}
								l13:
									add(ruleLiteral, position12)
								}
							default:
								if !_rules[ruleIdentifier]() {
									goto l9
								}
							}
						}

						if !_rules[ruleSpacing]() {
							goto l9
						}
						add(ruleOperand, position10)
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
				{
					position57 := position
					if !_rules[ruleSpacing]() {
						goto l4
					}
					if buffer[position] != rune(')') {
						goto l4
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l4
					}
					add(ruleRPAR, position57)
				}
				add(ruleExpression, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 Operator <- <(Identifier Spacing)> */
		nil,
		/* 3 Operand <- <(((&('\t' | '\n' | '\r' | ' ' | '(' | ';') Expression) | (&('"' | '#' | '+' | '-' | '.' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') Literal) | (&('$' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') Identifier)) Spacing)> */
		nil,
		/* 4 Spacing <- <(((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+ / (';' (!('\r' / '\n') .)* ('\r' / '\n')))*> */
		func() bool {
			{
				position61 := position
			l62:
				{
					position63, tokenIndex63 := position, tokenIndex
					{
						position64, tokenIndex64 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l65
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l65
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l65
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l65
								}
								position++
							}
						}

					l66:
						{
							position67, tokenIndex67 := position, tokenIndex
							{
								switch buffer[position] {
								case '\n':
									if buffer[position] != rune('\n') {
										goto l67
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l67
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l67
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l67
									}
									position++
								}
							}

							goto l66
						l67:
							position, tokenIndex = position67, tokenIndex67
						}
						goto l64
					l65:
						position, tokenIndex = position64, tokenIndex64
						if buffer[position] != rune(';') {
							goto l63
						}
						position++
					l70:
						{
							position71, tokenIndex71 := position, tokenIndex
							{
								position72, tokenIndex72 := position, tokenIndex
								{
									position73, tokenIndex73 := position, tokenIndex
									if buffer[position] != rune('\r') {
										goto l74
									}
									position++
									goto l73
								l74:
									position, tokenIndex = position73, tokenIndex73
									if buffer[position] != rune('\n') {
										goto l72
									}
									position++
								}
							l73:
								goto l71
							l72:
								position, tokenIndex = position72, tokenIndex72
							}
							if !matchDot() {
								goto l71
							}
							goto l70
						l71:
							position, tokenIndex = position71, tokenIndex71
						}
						{
							position75, tokenIndex75 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l76
							}
							position++
							goto l75
						l76:
							position, tokenIndex = position75, tokenIndex75
							if buffer[position] != rune('\n') {
								goto l63
							}
							position++
						}
					l75:
					}
				l64:
					goto l62
				l63:
					position, tokenIndex = position63, tokenIndex63
				}
				add(ruleSpacing, position61)
			}
			return true
		},
		/* 5 Identifier <- <((Letter / '$') (LetterOrDigit / '-')* Spacing?)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				{
					position79, tokenIndex79 := position, tokenIndex
					{
						position81 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l80
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l80
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l80
								}
								position++
							}
						}

						add(ruleLetter, position81)
					}
					goto l79
				l80:
					position, tokenIndex = position79, tokenIndex79
					if buffer[position] != rune('$') {
						goto l77
					}
					position++
				}
			l79:
			l83:
				{
					position84, tokenIndex84 := position, tokenIndex
					{
						position85, tokenIndex85 := position, tokenIndex
						if !_rules[ruleLetterOrDigit]() {
							goto l86
						}
						goto l85
					l86:
						position, tokenIndex = position85, tokenIndex85
						if buffer[position] != rune('-') {
							goto l84
						}
						position++
					}
				l85:
					goto l83
				l84:
					position, tokenIndex = position84, tokenIndex84
				}
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l87
					}
					goto l88
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
			l88:
				add(ruleIdentifier, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 6 Literal <- <(FloatLiteral / ((&('#') BoolLiteral) | (&('"') StringLiteral) | (&('-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') IntegerLiteral)))> */
		nil,
		/* 7 BoolLiteral <- <((('#' 'f') / ('#' 't')) !LetterOrDigit)> */
		nil,
		/* 8 FloatLiteral <- <(('+' / '-')? ((Digits '.' Digits? Exponent?) / (Digits Exponent) / ('.' Digits Exponent?)))> */
		nil,
		/* 9 Exponent <- <(('e' / 'E') ('+' / '-')? Digits)> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				{
					position94, tokenIndex94 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l95
					}
					position++
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if buffer[position] != rune('E') {
						goto l92
					}
					position++
				}
			l94:
				{
					position96, tokenIndex96 := position, tokenIndex
					{
						position98, tokenIndex98 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if buffer[position] != rune('-') {
							goto l96
						}
						position++
					}
				l98:
					goto l97
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
			l97:
				if !_rules[ruleDigits]() {
					goto l92
				}
				add(ruleExponent, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 10 IntegerLiteral <- <('-'? DecimalNumeral ((&('F') 'F') | (&('f') 'f') | (&('U') 'U') | (&('u') 'u'))?)> */
		nil,
		/* 11 DecimalNumeral <- <('0' / ([1-9] ('_'* [0-9])*))> */
		nil,
		/* 12 StringLiteral <- <('"' StringChar* '"')> */
		nil,
		/* 13 StringChar <- <(Escape / (!((&('\\') '\\') | (&('\n') '\n') | (&('"') '"')) .))> */
		nil,
		/* 14 LetterOrDigit <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l104
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l104
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l104
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l104
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 15 Letter <- <((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 16 Digits <- <([0-9] ('_'* [0-9])*)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l108
				}
				position++
			l110:
				{
					position111, tokenIndex111 := position, tokenIndex
				l112:
					{
						position113, tokenIndex113 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l113
						}
						position++
						goto l112
					l113:
						position, tokenIndex = position113, tokenIndex113
					}
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l111
					}
					position++
					goto l110
				l111:
					position, tokenIndex = position111, tokenIndex111
				}
				add(ruleDigits, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 17 Escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 18 LPAR <- <(Spacing '(' Spacing)> */
		nil,
		/* 19 RPAR <- <(Spacing ')' Spacing)> */
		nil,
		/* 20 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
