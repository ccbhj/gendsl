package gendsl

// Code generated by peg -switch -inline -strict -output ./grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleScript
	ruleExpression
	ruleOperator
	ruleOption
	ruleValue
	ruleSpacing
	ruleIdentifier
	ruleIdentifierPrefix
	ruleIdentifierChar
	ruleIdentifierAttr
	ruleAttrPath
	ruleLiteral
	ruleNilLiteral
	ruleBoolLiteral
	ruleFloatLiteral
	ruleExponent
	ruleIntegerLiteral
	ruleHexNumeral
	ruleDecimalNumeral
	ruleLongStringLiteral
	ruleLongStringChar
	ruleStringLiteral
	ruleStringChar
	ruleHexByte
	ruleUChar
	ruleLetterOrDigit
	ruleLetter
	ruleDigits
	ruleEscape
	ruleHexDigit
	ruleLPAR
	ruleRPAR
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Script",
	"Expression",
	"Operator",
	"Option",
	"Value",
	"Spacing",
	"Identifier",
	"IdentifierPrefix",
	"IdentifierChar",
	"IdentifierAttr",
	"AttrPath",
	"Literal",
	"NilLiteral",
	"BoolLiteral",
	"FloatLiteral",
	"Exponent",
	"IntegerLiteral",
	"HexNumeral",
	"DecimalNumeral",
	"LongStringLiteral",
	"LongStringChar",
	"StringLiteral",
	"StringChar",
	"HexByte",
	"UChar",
	"LetterOrDigit",
	"Letter",
	"Digits",
	"Escape",
	"HexDigit",
	"LPAR",
	"RPAR",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	Buffer string
	buffer []rune
	rules  [34]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Script <- <(Value EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleValue]() {
					goto l0
				}
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if !matchDot() {
							goto l3
						}
						goto l0
					l3:
						position, tokenIndex = position3, tokenIndex3
					}
					add(ruleEOT, position2)
				}
				add(ruleScript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression <- <(LPAR Operator (Option / Value)* RPAR)> */
		nil,
		/* 2 Operator <- <(Identifier Spacing?)> */
		nil,
		/* 3 Option <- <('#' ':' Identifier (Literal / Identifier) Spacing)> */
		nil,
		/* 4 Value <- <((Expression / Literal / IdentifierAttr / Identifier) Spacing)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9, tokenIndex9 := position, tokenIndex
					{
						position11 := position
						{
							position12 := position
							if !_rules[ruleSpacing]() {
								goto l10
							}
							if buffer[position] != rune('(') {
								goto l10
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l10
							}
							add(ruleLPAR, position12)
						}
						{
							position13 := position
							if !_rules[ruleIdentifier]() {
								goto l10
							}
							{
								position14, tokenIndex14 := position, tokenIndex
								if !_rules[ruleSpacing]() {
									goto l14
								}
								goto l15
							l14:
								position, tokenIndex = position14, tokenIndex14
							}
						l15:
							add(ruleOperator, position13)
						}
					l16:
						{
							position17, tokenIndex17 := position, tokenIndex
							{
								position18, tokenIndex18 := position, tokenIndex
								{
									position20 := position
									if buffer[position] != rune('#') {
										goto l19
									}
									position++
									if buffer[position] != rune(':') {
										goto l19
									}
									position++
									if !_rules[ruleIdentifier]() {
										goto l19
									}
									{
										position21, tokenIndex21 := position, tokenIndex
										if !_rules[ruleLiteral]() {
											goto l22
										}
										goto l21
									l22:
										position, tokenIndex = position21, tokenIndex21
										if !_rules[ruleIdentifier]() {
											goto l19
										}
									}
								l21:
									if !_rules[ruleSpacing]() {
										goto l19
									}
									add(ruleOption, position20)
								}
								goto l18
							l19:
								position, tokenIndex = position18, tokenIndex18
								if !_rules[ruleValue]() {
									goto l17
								}
							}
						l18:
							goto l16
						l17:
							position, tokenIndex = position17, tokenIndex17
						}
						{
							position23 := position
							if !_rules[ruleSpacing]() {
								goto l10
							}
							if buffer[position] != rune(')') {
								goto l10
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l10
							}
							add(ruleRPAR, position23)
						}
						add(ruleExpression, position11)
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleLiteral]() {
						goto l24
					}
					goto l9
				l24:
					position, tokenIndex = position9, tokenIndex9
					{
						position26 := position
						if !_rules[ruleIdentifier]() {
							goto l25
						}
						{
							position29 := position
							if buffer[position] != rune('.') {
								goto l25
							}
							position++
							if !_rules[ruleIdentifier]() {
								goto l25
							}
							add(ruleAttrPath, position29)
						}
					l27:
						{
							position28, tokenIndex28 := position, tokenIndex
							{
								position30 := position
								if buffer[position] != rune('.') {
									goto l28
								}
								position++
								if !_rules[ruleIdentifier]() {
									goto l28
								}
								add(ruleAttrPath, position30)
							}
							goto l27
						l28:
							position, tokenIndex = position28, tokenIndex28
						}
						add(ruleIdentifierAttr, position26)
					}
					goto l9
				l25:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleIdentifier]() {
						goto l7
					}
				}
			l9:
				if !_rules[ruleSpacing]() {
					goto l7
				}
				add(ruleValue, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 5 Spacing <- <(((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+ / (';' (!('\r' / '\n') .)* ('\r' / '\n')))*> */
		func() bool {
			{
				position32 := position
			l33:
				{
					position34, tokenIndex34 := position, tokenIndex
					{
						position35, tokenIndex35 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l36
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l36
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l36
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l36
								}
								position++
							}
						}

					l37:
						{
							position38, tokenIndex38 := position, tokenIndex
							{
								switch buffer[position] {
								case '\n':
									if buffer[position] != rune('\n') {
										goto l38
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l38
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l38
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l38
									}
									position++
								}
							}

							goto l37
						l38:
							position, tokenIndex = position38, tokenIndex38
						}
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						if buffer[position] != rune(';') {
							goto l34
						}
						position++
					l41:
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position43, tokenIndex43 := position, tokenIndex
								{
									position44, tokenIndex44 := position, tokenIndex
									if buffer[position] != rune('\r') {
										goto l45
									}
									position++
									goto l44
								l45:
									position, tokenIndex = position44, tokenIndex44
									if buffer[position] != rune('\n') {
										goto l43
									}
									position++
								}
							l44:
								goto l42
							l43:
								position, tokenIndex = position43, tokenIndex43
							}
							if !matchDot() {
								goto l42
							}
							goto l41
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
						{
							position46, tokenIndex46 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l47
							}
							position++
							goto l46
						l47:
							position, tokenIndex = position46, tokenIndex46
							if buffer[position] != rune('\n') {
								goto l34
							}
							position++
						}
					l46:
					}
				l35:
					goto l33
				l34:
					position, tokenIndex = position34, tokenIndex34
				}
				add(ruleSpacing, position32)
			}
			return true
		},
		/* 6 Identifier <- <(!BoolLiteral IdentifierPrefix IdentifierChar* Spacing)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				{
					position50, tokenIndex50 := position, tokenIndex
					if !_rules[ruleBoolLiteral]() {
						goto l50
					}
					goto l48
				l50:
					position, tokenIndex = position50, tokenIndex50
				}
				{
					position51 := position
					{
						position52, tokenIndex52 := position, tokenIndex
						{
							position54 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l53
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l53
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l53
									}
									position++
								}
							}

							add(ruleLetter, position54)
						}
						goto l52
					l53:
						position, tokenIndex = position52, tokenIndex52
						{
							switch buffer[position] {
							case '>':
								if buffer[position] != rune('>') {
									goto l48
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l48
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l48
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l48
								}
								position++
							case '_':
								if buffer[position] != rune('_') {
									goto l48
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l48
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l48
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l48
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l48
								}
								position++
							case '$':
								if buffer[position] != rune('$') {
									goto l48
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l48
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l48
								}
								position++
							default:
								if buffer[position] != rune('~') {
									goto l48
								}
								position++
							}
						}

					}
				l52:
					add(ruleIdentifierPrefix, position51)
				}
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					{
						position59 := position
						{
							position60, tokenIndex60 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l61
							}
							goto l60
						l61:
							position, tokenIndex = position60, tokenIndex60
							{
								switch buffer[position] {
								case '>':
									if buffer[position] != rune('>') {
										goto l62
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l62
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l62
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l62
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l62
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l62
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l62
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l62
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l62
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l62
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l62
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l62
									}
									position++
								default:
									if buffer[position] != rune('~') {
										goto l62
									}
									position++
								}
							}

							goto l60
						l62:
							position, tokenIndex = position60, tokenIndex60
							if buffer[position] != rune('-') {
								goto l58
							}
							position++
						}
					l60:
						add(ruleIdentifierChar, position59)
					}
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				if !_rules[ruleSpacing]() {
					goto l48
				}
				add(ruleIdentifier, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 7 IdentifierPrefix <- <(Letter / ((&('>') '>') | (&('<') '<') | (&('|') '|') | (&('?') '?') | (&('_') '_') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('@') '@') | (&('!') '!') | (&('~') '~')))> */
		nil,
		/* 8 IdentifierChar <- <(LetterOrDigit / ((&('>') '>') | (&('<') '<') | (&('|') '|') | (&('?') '?') | (&('_') '_') | (&('*') '*') | (&('&') '&') | (&('^') '^') | (&('%') '%') | (&('$') '$') | (&('@') '@') | (&('!') '!') | (&('~') '~')) / '-')> */
		nil,
		/* 9 IdentifierAttr <- <(Identifier AttrPath+)> */
		nil,
		/* 10 AttrPath <- <('.' Identifier)> */
		nil,
		/* 11 Literal <- <((FloatLiteral / LongStringLiteral / ((&('#') BoolLiteral) | (&('"') StringLiteral) | (&('n') NilLiteral) | (&('+' | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') IntegerLiteral))) Spacing)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					{
						position72 := position
						{
							position73, tokenIndex73 := position, tokenIndex
							{
								position75, tokenIndex75 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l76
								}
								position++
								goto l75
							l76:
								position, tokenIndex = position75, tokenIndex75
								if buffer[position] != rune('-') {
									goto l73
								}
								position++
							}
						l75:
							goto l74
						l73:
							position, tokenIndex = position73, tokenIndex73
						}
					l74:
						{
							position77, tokenIndex77 := position, tokenIndex
							if !_rules[ruleDigits]() {
								goto l78
							}
							if buffer[position] != rune('.') {
								goto l78
							}
							position++
							{
								position79, tokenIndex79 := position, tokenIndex
								if !_rules[ruleDigits]() {
									goto l79
								}
								goto l80
							l79:
								position, tokenIndex = position79, tokenIndex79
							}
						l80:
							{
								position81, tokenIndex81 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l81
								}
								goto l82
							l81:
								position, tokenIndex = position81, tokenIndex81
							}
						l82:
							goto l77
						l78:
							position, tokenIndex = position77, tokenIndex77
							if !_rules[ruleDigits]() {
								goto l83
							}
							if !_rules[ruleExponent]() {
								goto l83
							}
							goto l77
						l83:
							position, tokenIndex = position77, tokenIndex77
							if buffer[position] != rune('.') {
								goto l71
							}
							position++
							if !_rules[ruleDigits]() {
								goto l71
							}
							{
								position84, tokenIndex84 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l84
								}
								goto l85
							l84:
								position, tokenIndex = position84, tokenIndex84
							}
						l85:
						}
					l77:
						add(ruleFloatLiteral, position72)
					}
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					{
						position87 := position
						if buffer[position] != rune('"') {
							goto l86
						}
						position++
						if buffer[position] != rune('"') {
							goto l86
						}
						position++
						if buffer[position] != rune('"') {
							goto l86
						}
						position++
					l88:
						{
							position89, tokenIndex89 := position, tokenIndex
							{
								position90 := position
								{
									position91, tokenIndex91 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l91
									}
									position++
									goto l89
								l91:
									position, tokenIndex = position91, tokenIndex91
								}
								if !matchDot() {
									goto l89
								}
								add(ruleLongStringChar, position90)
							}
							goto l88
						l89:
							position, tokenIndex = position89, tokenIndex89
						}
						if buffer[position] != rune('"') {
							goto l86
						}
						position++
						if buffer[position] != rune('"') {
							goto l86
						}
						position++
						if buffer[position] != rune('"') {
							goto l86
						}
						position++
						add(ruleLongStringLiteral, position87)
					}
					goto l70
				l86:
					position, tokenIndex = position70, tokenIndex70
					{
						switch buffer[position] {
						case '#':
							if !_rules[ruleBoolLiteral]() {
								goto l68
							}
						case '"':
							{
								position93 := position
								if buffer[position] != rune('"') {
									goto l68
								}
								position++
							l94:
								{
									position95, tokenIndex95 := position, tokenIndex
									{
										position96 := position
										{
											position97, tokenIndex97 := position, tokenIndex
											{
												position99 := position
												{
													position100, tokenIndex100 := position, tokenIndex
													if buffer[position] != rune('\\') {
														goto l101
													}
													position++
													if buffer[position] != rune('u') {
														goto l101
													}
													position++
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													if !_rules[ruleHexDigit]() {
														goto l101
													}
													goto l100
												l101:
													position, tokenIndex = position100, tokenIndex100
													if buffer[position] != rune('\\') {
														goto l98
													}
													position++
													if buffer[position] != rune('U') {
														goto l98
													}
													position++
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
													if !_rules[ruleHexDigit]() {
														goto l98
													}
												}
											l100:
												add(ruleUChar, position99)
											}
											goto l97
										l98:
											position, tokenIndex = position97, tokenIndex97
											{
												position103 := position
												if buffer[position] != rune('\\') {
													goto l102
												}
												position++
												{
													switch buffer[position] {
													case '\'':
														if buffer[position] != rune('\'') {
															goto l102
														}
														position++
													case '"':
														if buffer[position] != rune('"') {
															goto l102
														}
														position++
													case '\\':
														if buffer[position] != rune('\\') {
															goto l102
														}
														position++
													case 'v':
														if buffer[position] != rune('v') {
															goto l102
														}
														position++
													case 't':
														if buffer[position] != rune('t') {
															goto l102
														}
														position++
													case 'r':
														if buffer[position] != rune('r') {
															goto l102
														}
														position++
													case 'n':
														if buffer[position] != rune('n') {
															goto l102
														}
														position++
													case 'f':
														if buffer[position] != rune('f') {
															goto l102
														}
														position++
													case 'b':
														if buffer[position] != rune('b') {
															goto l102
														}
														position++
													default:
														if buffer[position] != rune('a') {
															goto l102
														}
														position++
													}
												}

												add(ruleEscape, position103)
											}
											goto l97
										l102:
											position, tokenIndex = position97, tokenIndex97
											{
												position106 := position
												if buffer[position] != rune('\\') {
													goto l105
												}
												position++
												if buffer[position] != rune('x') {
													goto l105
												}
												position++
												if !_rules[ruleHexDigit]() {
													goto l105
												}
												if !_rules[ruleHexDigit]() {
													goto l105
												}
												add(ruleHexByte, position106)
											}
											goto l97
										l105:
											position, tokenIndex = position97, tokenIndex97
											{
												position107, tokenIndex107 := position, tokenIndex
												{
													switch buffer[position] {
													case '\\':
														if buffer[position] != rune('\\') {
															goto l107
														}
														position++
													case '\n':
														if buffer[position] != rune('\n') {
															goto l107
														}
														position++
													default:
														if buffer[position] != rune('"') {
															goto l107
														}
														position++
													}
												}

												goto l95
											l107:
												position, tokenIndex = position107, tokenIndex107
											}
											if !matchDot() {
												goto l95
											}
										}
									l97:
										add(ruleStringChar, position96)
									}
									goto l94
								l95:
									position, tokenIndex = position95, tokenIndex95
								}
								if buffer[position] != rune('"') {
									goto l68
								}
								position++
								add(ruleStringLiteral, position93)
							}
						case 'n':
							{
								position109 := position
								if buffer[position] != rune('n') {
									goto l68
								}
								position++
								if buffer[position] != rune('i') {
									goto l68
								}
								position++
								if buffer[position] != rune('l') {
									goto l68
								}
								position++
								add(ruleNilLiteral, position109)
							}
						default:
							{
								position110 := position
								{
									position111, tokenIndex111 := position, tokenIndex
									{
										position113, tokenIndex113 := position, tokenIndex
										if buffer[position] != rune('+') {
											goto l114
										}
										position++
										goto l113
									l114:
										position, tokenIndex = position113, tokenIndex113
										if buffer[position] != rune('-') {
											goto l111
										}
										position++
									}
								l113:
									goto l112
								l111:
									position, tokenIndex = position111, tokenIndex111
								}
							l112:
								{
									position115, tokenIndex115 := position, tokenIndex
									if buffer[position] != rune('0') {
										goto l116
									}
									position++
									{
										position117, tokenIndex117 := position, tokenIndex
										if buffer[position] != rune('x') {
											goto l118
										}
										position++
										goto l117
									l118:
										position, tokenIndex = position117, tokenIndex117
										if buffer[position] != rune('X') {
											goto l116
										}
										position++
									}
								l117:
									{
										position119 := position
										{
											position120, tokenIndex120 := position, tokenIndex
											if !_rules[ruleHexDigit]() {
												goto l121
											}
										l122:
											{
												position123, tokenIndex123 := position, tokenIndex
											l124:
												{
													position125, tokenIndex125 := position, tokenIndex
													if buffer[position] != rune('_') {
														goto l125
													}
													position++
													goto l124
												l125:
													position, tokenIndex = position125, tokenIndex125
												}
												if !_rules[ruleHexDigit]() {
													goto l123
												}
												goto l122
											l123:
												position, tokenIndex = position123, tokenIndex123
											}
											goto l120
										l121:
											position, tokenIndex = position120, tokenIndex120
											if buffer[position] != rune('0') {
												goto l116
											}
											position++
										}
									l120:
										add(ruleHexNumeral, position119)
									}
									goto l115
								l116:
									position, tokenIndex = position115, tokenIndex115
									{
										position126 := position
										{
											position127, tokenIndex127 := position, tokenIndex
											if c := buffer[position]; c < rune('1') || c > rune('9') {
												goto l128
											}
											position++
										l129:
											{
												position130, tokenIndex130 := position, tokenIndex
											l131:
												{
													position132, tokenIndex132 := position, tokenIndex
													if buffer[position] != rune('_') {
														goto l132
													}
													position++
													goto l131
												l132:
													position, tokenIndex = position132, tokenIndex132
												}
												if c := buffer[position]; c < rune('0') || c > rune('9') {
													goto l130
												}
												position++
												goto l129
											l130:
												position, tokenIndex = position130, tokenIndex130
											}
											goto l127
										l128:
											position, tokenIndex = position127, tokenIndex127
											if buffer[position] != rune('0') {
												goto l68
											}
											position++
										}
									l127:
										add(ruleDecimalNumeral, position126)
									}
								}
							l115:
								{
									position133, tokenIndex133 := position, tokenIndex
									{
										position135, tokenIndex135 := position, tokenIndex
										if buffer[position] != rune('u') {
											goto l136
										}
										position++
										goto l135
									l136:
										position, tokenIndex = position135, tokenIndex135
										if buffer[position] != rune('U') {
											goto l133
										}
										position++
									}
								l135:
									goto l134
								l133:
									position, tokenIndex = position133, tokenIndex133
								}
							l134:
								add(ruleIntegerLiteral, position110)
							}
						}
					}

				}
			l70:
				if !_rules[ruleSpacing]() {
					goto l68
				}
				add(ruleLiteral, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 12 NilLiteral <- <('n' 'i' 'l')> */
		nil,
		/* 13 BoolLiteral <- <((('#' 'f') / ('#' 't')) !LetterOrDigit)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				{
					position140, tokenIndex140 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l141
					}
					position++
					if buffer[position] != rune('f') {
						goto l141
					}
					position++
					goto l140
				l141:
					position, tokenIndex = position140, tokenIndex140
					if buffer[position] != rune('#') {
						goto l138
					}
					position++
					if buffer[position] != rune('t') {
						goto l138
					}
					position++
				}
			l140:
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l142
					}
					goto l138
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
				add(ruleBoolLiteral, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 14 FloatLiteral <- <(('+' / '-')? ((Digits '.' Digits? Exponent?) / (Digits Exponent) / ('.' Digits Exponent?)))> */
		nil,
		/* 15 Exponent <- <(('e' / 'E') ('+' / '-')? Digits)> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				{
					position146, tokenIndex146 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l147
					}
					position++
					goto l146
				l147:
					position, tokenIndex = position146, tokenIndex146
					if buffer[position] != rune('E') {
						goto l144
					}
					position++
				}
			l146:
				{
					position148, tokenIndex148 := position, tokenIndex
					{
						position150, tokenIndex150 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l151
						}
						position++
						goto l150
					l151:
						position, tokenIndex = position150, tokenIndex150
						if buffer[position] != rune('-') {
							goto l148
						}
						position++
					}
				l150:
					goto l149
				l148:
					position, tokenIndex = position148, tokenIndex148
				}
			l149:
				if !_rules[ruleDigits]() {
					goto l144
				}
				add(ruleExponent, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 16 IntegerLiteral <- <(('+' / '-')? (('0' ('x' / 'X') HexNumeral) / DecimalNumeral) ('u' / 'U')?)> */
		nil,
		/* 17 HexNumeral <- <((HexDigit ('_'* HexDigit)*) / '0')> */
		nil,
		/* 18 DecimalNumeral <- <(([1-9] ('_'* [0-9])*) / '0')> */
		nil,
		/* 19 LongStringLiteral <- <('"' '"' '"' LongStringChar* ('"' '"' '"'))> */
		nil,
		/* 20 LongStringChar <- <(!'"' .)> */
		nil,
		/* 21 StringLiteral <- <('"' StringChar* '"')> */
		nil,
		/* 22 StringChar <- <(UChar / Escape / HexByte / (!((&('\\') '\\') | (&('\n') '\n') | (&('"') '"')) .))> */
		nil,
		/* 23 HexByte <- <('\\' 'x' HexDigit HexDigit)> */
		nil,
		/* 24 UChar <- <(('\\' 'u' HexDigit HexDigit HexDigit HexDigit) / ('\\' 'U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit))> */
		nil,
		/* 25 LetterOrDigit <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l161
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l161
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l161
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l161
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 26 Letter <- <((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 27 Digits <- <([0-9] ('_'* [0-9])*)> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l165
				}
				position++
			l167:
				{
					position168, tokenIndex168 := position, tokenIndex
				l169:
					{
						position170, tokenIndex170 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l170
						}
						position++
						goto l169
					l170:
						position, tokenIndex = position170, tokenIndex170
					}
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l168
					}
					position++
					goto l167
				l168:
					position, tokenIndex = position168, tokenIndex168
				}
				add(ruleDigits, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 28 Escape <- <('\\' ((&('\'') '\'') | (&('"') '"') | (&('\\') '\\') | (&('v') 'v') | (&('t') 't') | (&('r') 'r') | (&('n') 'n') | (&('f') 'f') | (&('b') 'b') | (&('a') 'a')))> */
		nil,
		/* 29 HexDigit <- <((&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				{
					switch buffer[position] {
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l172
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l172
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l172
						}
						position++
					}
				}

				add(ruleHexDigit, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 30 LPAR <- <(Spacing '(' Spacing)> */
		nil,
		/* 31 RPAR <- <(Spacing ')' Spacing)> */
		nil,
		/* 32 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
