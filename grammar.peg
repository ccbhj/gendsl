package gendsl

type parser Peg {
}

Script             <-         Value EOT

# Definition       <-         LPAR DefType OptionList? DefinitionBody RPAR
# 
# DefinitionBody   <-         Definition 
#                              / Definition+
#                              / Expression+
#                              / Literal
#                              / Identifier
# 

Expression       <-         LPAR Operator OptionList? Value* RPAR 

Operator         <-         Identifier

Value            <-         (Expression
                             / Literal
                             / Identifier
                            ) Spacing

OptionList       <-         Option+

Option           <-         '#:' Identifier (Literal/Identifier) Spacing


#-------------------------------------------------------------------------
# Lexical elements
#-------------------------------------------------------------------------
Spacing          <-        ( [ \t\r\n]+
                             / ';' (![\r\n] .)* [\r\n]
                           )*

Identifier       <-       (Letter / '$' / '@') (LetterOrDigit / '-')* Spacing #{}

#-------------------------------------------------------------------------
# Literals
#-------------------------------------------------------------------------

Literal                <-               ( NilLiteral
                                          / FloatLiteral
                                          / IntegerLiteral          # May be a prefix of FloatLiteral
                                          / LongStringLiteral
                                          / StringLiteral
                                          / BoolLiteral
                                        )  Spacing

NilLiteral             <-               'nil'

BoolLiteral            <-               ('#f' / '#t') !LetterOrDigit 

FloatLiteral           <-               [+\-]? (Digits '.' Digits?  Exponent?
                                                /  Digits Exponent
                                                / '.' Digits Exponent?)

Exponent               <-               [eE] [+\-]? Digits

IntegerLiteral         <-               [+\-]? ('0' ('x' / 'X') HexNumeral 
                                              / DecimalNumeral ) [uU]?

HexNumeral             <-               HexDigit ([_]* HexDigit)* / '0'

DecimalNumeral         <-               [1-9] ([_]* [0-9])* / '0'

LongStringLiteral      <-               '"""' LongStringChar* '"""'

LongStringChar         <-               ![\"].

StringLiteral          <-               ["] StringChar* ["]

StringChar             <-               UChar / Escape / HexByte / ![\"\n\\] . 

HexByte                <-               '\\' 'x' HexDigit HexDigit

UChar                  <-               '\\' 'u' HexDigit HexDigit HexDigit HexDigit
                                        /  '\\' 'U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit


LetterOrDigit          <-               [a-z] / [A-Z] / [0-9] / [_]

Letter                 <-               [a-z] / [A-Z] / [_]

Digits                 <-               [0-9]([_]*[0-9])*

Escape                 <-               '\\' [abfnrtv\\"']

HexDigit               <-               [0-9] / [A-F] / [a-f]

#-------------------------------------------------------------------------
# Keywords
#-------------------------------------------------------------------------
# Keyword                <-            ('define-prdt'
#                                       / 'define-lhs'
#                                       / 'define-rhs'
#                                       / 'rule'
#                                       / 'define'        # must be the last one to match
#                                       ) !LetterOrDigit
# 
# DefType                <-               '#' Identifier


#-------------------------------------------------------------------------
# Punctuators
#-------------------------------------------------------------------------

LPAR      <-  Spacing        '('         Spacing

RPAR      <-  Spacing        ')'         Spacing

# LBRK      <-  Spacing        '['         Spacing
# 
# RBRK      <-  Spacing        ']'         Spacing

EOT       <-  !.

